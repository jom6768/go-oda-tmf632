/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FaxContactMediumFVO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FaxContactMediumFVO{}

// FaxContactMediumFVO struct for FaxContactMediumFVO
type FaxContactMediumFVO struct {
	ContactMediumFVO
	// The fax number of the contact
	FaxNumber *string `json:"faxNumber,omitempty"`
}

type _FaxContactMediumFVO FaxContactMediumFVO

// NewFaxContactMediumFVO instantiates a new FaxContactMediumFVO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFaxContactMediumFVO(type_ string) *FaxContactMediumFVO {
	this := FaxContactMediumFVO{}
	this.Type = type_
	return &this
}

// NewFaxContactMediumFVOWithDefaults instantiates a new FaxContactMediumFVO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFaxContactMediumFVOWithDefaults() *FaxContactMediumFVO {
	this := FaxContactMediumFVO{}
	return &this
}

// GetFaxNumber returns the FaxNumber field value if set, zero value otherwise.
func (o *FaxContactMediumFVO) GetFaxNumber() string {
	if o == nil || IsNil(o.FaxNumber) {
		var ret string
		return ret
	}
	return *o.FaxNumber
}

// GetFaxNumberOk returns a tuple with the FaxNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FaxContactMediumFVO) GetFaxNumberOk() (*string, bool) {
	if o == nil || IsNil(o.FaxNumber) {
		return nil, false
	}
	return o.FaxNumber, true
}

// HasFaxNumber returns a boolean if a field has been set.
func (o *FaxContactMediumFVO) HasFaxNumber() bool {
	if o != nil && !IsNil(o.FaxNumber) {
		return true
	}

	return false
}

// SetFaxNumber gets a reference to the given string and assigns it to the FaxNumber field.
func (o *FaxContactMediumFVO) SetFaxNumber(v string) {
	o.FaxNumber = &v
}

func (o FaxContactMediumFVO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FaxContactMediumFVO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedContactMediumFVO, errContactMediumFVO := json.Marshal(o.ContactMediumFVO)
	if errContactMediumFVO != nil {
		return map[string]interface{}{}, errContactMediumFVO
	}
	errContactMediumFVO = json.Unmarshal([]byte(serializedContactMediumFVO), &toSerialize)
	if errContactMediumFVO != nil {
		return map[string]interface{}{}, errContactMediumFVO
	}
	if !IsNil(o.FaxNumber) {
		toSerialize["faxNumber"] = o.FaxNumber
	}
	return toSerialize, nil
}

func (o *FaxContactMediumFVO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFaxContactMediumFVO := _FaxContactMediumFVO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFaxContactMediumFVO)

	if err != nil {
		return err
	}

	*o = FaxContactMediumFVO(varFaxContactMediumFVO)

	return err
}

type NullableFaxContactMediumFVO struct {
	value *FaxContactMediumFVO
	isSet bool
}

func (v NullableFaxContactMediumFVO) Get() *FaxContactMediumFVO {
	return v.value
}

func (v *NullableFaxContactMediumFVO) Set(val *FaxContactMediumFVO) {
	v.value = val
	v.isSet = true
}

func (v NullableFaxContactMediumFVO) IsSet() bool {
	return v.isSet
}

func (v *NullableFaxContactMediumFVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFaxContactMediumFVO(val *FaxContactMediumFVO) *NullableFaxContactMediumFVO {
	return &NullableFaxContactMediumFVO{value: val, isSet: true}
}

func (v NullableFaxContactMediumFVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFaxContactMediumFVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


