/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PartyOrPartyRoleMVO - 
type PartyOrPartyRoleMVO struct {
	BusinessPartnerMVO *BusinessPartnerMVO
	ConsumerMVO *ConsumerMVO
	IndividualMVO *IndividualMVO
	OrganizationMVO *OrganizationMVO
	PartyRefMVO *PartyRefMVO
	PartyRoleMVO *PartyRoleMVO
	PartyRoleRefMVO *PartyRoleRefMVO
	ProducerMVO *ProducerMVO
	SupplierMVO *SupplierMVO
}

// BusinessPartnerMVOAsPartyOrPartyRoleMVO is a convenience function that returns BusinessPartnerMVO wrapped in PartyOrPartyRoleMVO
func BusinessPartnerMVOAsPartyOrPartyRoleMVO(v *BusinessPartnerMVO) PartyOrPartyRoleMVO {
	return PartyOrPartyRoleMVO{
		BusinessPartnerMVO: v,
	}
}

// ConsumerMVOAsPartyOrPartyRoleMVO is a convenience function that returns ConsumerMVO wrapped in PartyOrPartyRoleMVO
func ConsumerMVOAsPartyOrPartyRoleMVO(v *ConsumerMVO) PartyOrPartyRoleMVO {
	return PartyOrPartyRoleMVO{
		ConsumerMVO: v,
	}
}

// IndividualMVOAsPartyOrPartyRoleMVO is a convenience function that returns IndividualMVO wrapped in PartyOrPartyRoleMVO
func IndividualMVOAsPartyOrPartyRoleMVO(v *IndividualMVO) PartyOrPartyRoleMVO {
	return PartyOrPartyRoleMVO{
		IndividualMVO: v,
	}
}

// OrganizationMVOAsPartyOrPartyRoleMVO is a convenience function that returns OrganizationMVO wrapped in PartyOrPartyRoleMVO
func OrganizationMVOAsPartyOrPartyRoleMVO(v *OrganizationMVO) PartyOrPartyRoleMVO {
	return PartyOrPartyRoleMVO{
		OrganizationMVO: v,
	}
}

// PartyRefMVOAsPartyOrPartyRoleMVO is a convenience function that returns PartyRefMVO wrapped in PartyOrPartyRoleMVO
func PartyRefMVOAsPartyOrPartyRoleMVO(v *PartyRefMVO) PartyOrPartyRoleMVO {
	return PartyOrPartyRoleMVO{
		PartyRefMVO: v,
	}
}

// PartyRoleMVOAsPartyOrPartyRoleMVO is a convenience function that returns PartyRoleMVO wrapped in PartyOrPartyRoleMVO
func PartyRoleMVOAsPartyOrPartyRoleMVO(v *PartyRoleMVO) PartyOrPartyRoleMVO {
	return PartyOrPartyRoleMVO{
		PartyRoleMVO: v,
	}
}

// PartyRoleRefMVOAsPartyOrPartyRoleMVO is a convenience function that returns PartyRoleRefMVO wrapped in PartyOrPartyRoleMVO
func PartyRoleRefMVOAsPartyOrPartyRoleMVO(v *PartyRoleRefMVO) PartyOrPartyRoleMVO {
	return PartyOrPartyRoleMVO{
		PartyRoleRefMVO: v,
	}
}

// ProducerMVOAsPartyOrPartyRoleMVO is a convenience function that returns ProducerMVO wrapped in PartyOrPartyRoleMVO
func ProducerMVOAsPartyOrPartyRoleMVO(v *ProducerMVO) PartyOrPartyRoleMVO {
	return PartyOrPartyRoleMVO{
		ProducerMVO: v,
	}
}

// SupplierMVOAsPartyOrPartyRoleMVO is a convenience function that returns SupplierMVO wrapped in PartyOrPartyRoleMVO
func SupplierMVOAsPartyOrPartyRoleMVO(v *SupplierMVO) PartyOrPartyRoleMVO {
	return PartyOrPartyRoleMVO{
		SupplierMVO: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PartyOrPartyRoleMVO) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BusinessPartnerMVO
	err = newStrictDecoder(data).Decode(&dst.BusinessPartnerMVO)
	if err == nil {
		jsonBusinessPartnerMVO, _ := json.Marshal(dst.BusinessPartnerMVO)
		if string(jsonBusinessPartnerMVO) == "{}" { // empty struct
			dst.BusinessPartnerMVO = nil
		} else {
			if err = validator.Validate(dst.BusinessPartnerMVO); err != nil {
				dst.BusinessPartnerMVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.BusinessPartnerMVO = nil
	}

	// try to unmarshal data into ConsumerMVO
	err = newStrictDecoder(data).Decode(&dst.ConsumerMVO)
	if err == nil {
		jsonConsumerMVO, _ := json.Marshal(dst.ConsumerMVO)
		if string(jsonConsumerMVO) == "{}" { // empty struct
			dst.ConsumerMVO = nil
		} else {
			if err = validator.Validate(dst.ConsumerMVO); err != nil {
				dst.ConsumerMVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConsumerMVO = nil
	}

	// try to unmarshal data into IndividualMVO
	err = newStrictDecoder(data).Decode(&dst.IndividualMVO)
	if err == nil {
		jsonIndividualMVO, _ := json.Marshal(dst.IndividualMVO)
		if string(jsonIndividualMVO) == "{}" { // empty struct
			dst.IndividualMVO = nil
		} else {
			if err = validator.Validate(dst.IndividualMVO); err != nil {
				dst.IndividualMVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.IndividualMVO = nil
	}

	// try to unmarshal data into OrganizationMVO
	err = newStrictDecoder(data).Decode(&dst.OrganizationMVO)
	if err == nil {
		jsonOrganizationMVO, _ := json.Marshal(dst.OrganizationMVO)
		if string(jsonOrganizationMVO) == "{}" { // empty struct
			dst.OrganizationMVO = nil
		} else {
			if err = validator.Validate(dst.OrganizationMVO); err != nil {
				dst.OrganizationMVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.OrganizationMVO = nil
	}

	// try to unmarshal data into PartyRefMVO
	err = newStrictDecoder(data).Decode(&dst.PartyRefMVO)
	if err == nil {
		jsonPartyRefMVO, _ := json.Marshal(dst.PartyRefMVO)
		if string(jsonPartyRefMVO) == "{}" { // empty struct
			dst.PartyRefMVO = nil
		} else {
			if err = validator.Validate(dst.PartyRefMVO); err != nil {
				dst.PartyRefMVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.PartyRefMVO = nil
	}

	// try to unmarshal data into PartyRoleMVO
	err = newStrictDecoder(data).Decode(&dst.PartyRoleMVO)
	if err == nil {
		jsonPartyRoleMVO, _ := json.Marshal(dst.PartyRoleMVO)
		if string(jsonPartyRoleMVO) == "{}" { // empty struct
			dst.PartyRoleMVO = nil
		} else {
			if err = validator.Validate(dst.PartyRoleMVO); err != nil {
				dst.PartyRoleMVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.PartyRoleMVO = nil
	}

	// try to unmarshal data into PartyRoleRefMVO
	err = newStrictDecoder(data).Decode(&dst.PartyRoleRefMVO)
	if err == nil {
		jsonPartyRoleRefMVO, _ := json.Marshal(dst.PartyRoleRefMVO)
		if string(jsonPartyRoleRefMVO) == "{}" { // empty struct
			dst.PartyRoleRefMVO = nil
		} else {
			if err = validator.Validate(dst.PartyRoleRefMVO); err != nil {
				dst.PartyRoleRefMVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.PartyRoleRefMVO = nil
	}

	// try to unmarshal data into ProducerMVO
	err = newStrictDecoder(data).Decode(&dst.ProducerMVO)
	if err == nil {
		jsonProducerMVO, _ := json.Marshal(dst.ProducerMVO)
		if string(jsonProducerMVO) == "{}" { // empty struct
			dst.ProducerMVO = nil
		} else {
			if err = validator.Validate(dst.ProducerMVO); err != nil {
				dst.ProducerMVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProducerMVO = nil
	}

	// try to unmarshal data into SupplierMVO
	err = newStrictDecoder(data).Decode(&dst.SupplierMVO)
	if err == nil {
		jsonSupplierMVO, _ := json.Marshal(dst.SupplierMVO)
		if string(jsonSupplierMVO) == "{}" { // empty struct
			dst.SupplierMVO = nil
		} else {
			if err = validator.Validate(dst.SupplierMVO); err != nil {
				dst.SupplierMVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.SupplierMVO = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BusinessPartnerMVO = nil
		dst.ConsumerMVO = nil
		dst.IndividualMVO = nil
		dst.OrganizationMVO = nil
		dst.PartyRefMVO = nil
		dst.PartyRoleMVO = nil
		dst.PartyRoleRefMVO = nil
		dst.ProducerMVO = nil
		dst.SupplierMVO = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PartyOrPartyRoleMVO)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PartyOrPartyRoleMVO)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PartyOrPartyRoleMVO) MarshalJSON() ([]byte, error) {
	if src.BusinessPartnerMVO != nil {
		return json.Marshal(&src.BusinessPartnerMVO)
	}

	if src.ConsumerMVO != nil {
		return json.Marshal(&src.ConsumerMVO)
	}

	if src.IndividualMVO != nil {
		return json.Marshal(&src.IndividualMVO)
	}

	if src.OrganizationMVO != nil {
		return json.Marshal(&src.OrganizationMVO)
	}

	if src.PartyRefMVO != nil {
		return json.Marshal(&src.PartyRefMVO)
	}

	if src.PartyRoleMVO != nil {
		return json.Marshal(&src.PartyRoleMVO)
	}

	if src.PartyRoleRefMVO != nil {
		return json.Marshal(&src.PartyRoleRefMVO)
	}

	if src.ProducerMVO != nil {
		return json.Marshal(&src.ProducerMVO)
	}

	if src.SupplierMVO != nil {
		return json.Marshal(&src.SupplierMVO)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PartyOrPartyRoleMVO) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BusinessPartnerMVO != nil {
		return obj.BusinessPartnerMVO
	}

	if obj.ConsumerMVO != nil {
		return obj.ConsumerMVO
	}

	if obj.IndividualMVO != nil {
		return obj.IndividualMVO
	}

	if obj.OrganizationMVO != nil {
		return obj.OrganizationMVO
	}

	if obj.PartyRefMVO != nil {
		return obj.PartyRefMVO
	}

	if obj.PartyRoleMVO != nil {
		return obj.PartyRoleMVO
	}

	if obj.PartyRoleRefMVO != nil {
		return obj.PartyRoleRefMVO
	}

	if obj.ProducerMVO != nil {
		return obj.ProducerMVO
	}

	if obj.SupplierMVO != nil {
		return obj.SupplierMVO
	}

	// all schemas are nil
	return nil
}

type NullablePartyOrPartyRoleMVO struct {
	value *PartyOrPartyRoleMVO
	isSet bool
}

func (v NullablePartyOrPartyRoleMVO) Get() *PartyOrPartyRoleMVO {
	return v.value
}

func (v *NullablePartyOrPartyRoleMVO) Set(val *PartyOrPartyRoleMVO) {
	v.value = val
	v.isSet = true
}

func (v NullablePartyOrPartyRoleMVO) IsSet() bool {
	return v.isSet
}

func (v *NullablePartyOrPartyRoleMVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartyOrPartyRoleMVO(val *PartyOrPartyRoleMVO) *NullablePartyOrPartyRoleMVO {
	return &NullablePartyOrPartyRoleMVO{value: val, isSet: true}
}

func (v NullablePartyOrPartyRoleMVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartyOrPartyRoleMVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


