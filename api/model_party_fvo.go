/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PartyFVO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartyFVO{}

// PartyFVO struct for PartyFVO
type PartyFVO struct {
	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// unique identifier
	Id *string `json:"id,omitempty"`
	// List of identifiers of the Party in an external system, for example when party information is imported from a commerce system
	ExternalReference []ExternalIdentifierFVO `json:"externalReference,omitempty"`
	// List of additional characteristics that a Party can take on.
	PartyCharacteristic []CharacteristicFVO `json:"partyCharacteristic,omitempty"`
	// List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax
	TaxExemptionCertificate []TaxExemptionCertificateFVO `json:"taxExemptionCertificate,omitempty"`
	// List of credit profiles and scores for the party, typically received from an external credit broker
	CreditRating []PartyCreditProfileFVO `json:"creditRating,omitempty"`
	// List of parties and/or party roles related to this party
	RelatedParty []RelatedPartyOrPartyRoleFVO `json:"relatedParty,omitempty"`
	// List of means for contacting the party, e.g. mobile phone, email address
	ContactMedium []ContactMediumFVO `json:"contactMedium,omitempty"`
}

type _PartyFVO PartyFVO

// NewPartyFVO instantiates a new PartyFVO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartyFVO(type_ string) *PartyFVO {
	this := PartyFVO{}
	this.Type = type_
	return &this
}

// NewPartyFVOWithDefaults instantiates a new PartyFVO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartyFVOWithDefaults() *PartyFVO {
	this := PartyFVO{}
	return &this
}

// GetType returns the Type field value
func (o *PartyFVO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PartyFVO) SetType(v string) {
	o.Type = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *PartyFVO) GetBaseType() string {
	if o == nil || IsNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetBaseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *PartyFVO) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *PartyFVO) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *PartyFVO) GetSchemaLocation() string {
	if o == nil || IsNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetSchemaLocationOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaLocation) {
		return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *PartyFVO) HasSchemaLocation() bool {
	if o != nil && !IsNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *PartyFVO) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PartyFVO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PartyFVO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PartyFVO) SetId(v string) {
	o.Id = &v
}

// GetExternalReference returns the ExternalReference field value if set, zero value otherwise.
func (o *PartyFVO) GetExternalReference() []ExternalIdentifierFVO {
	if o == nil || IsNil(o.ExternalReference) {
		var ret []ExternalIdentifierFVO
		return ret
	}
	return o.ExternalReference
}

// GetExternalReferenceOk returns a tuple with the ExternalReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetExternalReferenceOk() ([]ExternalIdentifierFVO, bool) {
	if o == nil || IsNil(o.ExternalReference) {
		return nil, false
	}
	return o.ExternalReference, true
}

// HasExternalReference returns a boolean if a field has been set.
func (o *PartyFVO) HasExternalReference() bool {
	if o != nil && !IsNil(o.ExternalReference) {
		return true
	}

	return false
}

// SetExternalReference gets a reference to the given []ExternalIdentifierFVO and assigns it to the ExternalReference field.
func (o *PartyFVO) SetExternalReference(v []ExternalIdentifierFVO) {
	o.ExternalReference = v
}

// GetPartyCharacteristic returns the PartyCharacteristic field value if set, zero value otherwise.
func (o *PartyFVO) GetPartyCharacteristic() []CharacteristicFVO {
	if o == nil || IsNil(o.PartyCharacteristic) {
		var ret []CharacteristicFVO
		return ret
	}
	return o.PartyCharacteristic
}

// GetPartyCharacteristicOk returns a tuple with the PartyCharacteristic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetPartyCharacteristicOk() ([]CharacteristicFVO, bool) {
	if o == nil || IsNil(o.PartyCharacteristic) {
		return nil, false
	}
	return o.PartyCharacteristic, true
}

// HasPartyCharacteristic returns a boolean if a field has been set.
func (o *PartyFVO) HasPartyCharacteristic() bool {
	if o != nil && !IsNil(o.PartyCharacteristic) {
		return true
	}

	return false
}

// SetPartyCharacteristic gets a reference to the given []CharacteristicFVO and assigns it to the PartyCharacteristic field.
func (o *PartyFVO) SetPartyCharacteristic(v []CharacteristicFVO) {
	o.PartyCharacteristic = v
}

// GetTaxExemptionCertificate returns the TaxExemptionCertificate field value if set, zero value otherwise.
func (o *PartyFVO) GetTaxExemptionCertificate() []TaxExemptionCertificateFVO {
	if o == nil || IsNil(o.TaxExemptionCertificate) {
		var ret []TaxExemptionCertificateFVO
		return ret
	}
	return o.TaxExemptionCertificate
}

// GetTaxExemptionCertificateOk returns a tuple with the TaxExemptionCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetTaxExemptionCertificateOk() ([]TaxExemptionCertificateFVO, bool) {
	if o == nil || IsNil(o.TaxExemptionCertificate) {
		return nil, false
	}
	return o.TaxExemptionCertificate, true
}

// HasTaxExemptionCertificate returns a boolean if a field has been set.
func (o *PartyFVO) HasTaxExemptionCertificate() bool {
	if o != nil && !IsNil(o.TaxExemptionCertificate) {
		return true
	}

	return false
}

// SetTaxExemptionCertificate gets a reference to the given []TaxExemptionCertificateFVO and assigns it to the TaxExemptionCertificate field.
func (o *PartyFVO) SetTaxExemptionCertificate(v []TaxExemptionCertificateFVO) {
	o.TaxExemptionCertificate = v
}

// GetCreditRating returns the CreditRating field value if set, zero value otherwise.
func (o *PartyFVO) GetCreditRating() []PartyCreditProfileFVO {
	if o == nil || IsNil(o.CreditRating) {
		var ret []PartyCreditProfileFVO
		return ret
	}
	return o.CreditRating
}

// GetCreditRatingOk returns a tuple with the CreditRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetCreditRatingOk() ([]PartyCreditProfileFVO, bool) {
	if o == nil || IsNil(o.CreditRating) {
		return nil, false
	}
	return o.CreditRating, true
}

// HasCreditRating returns a boolean if a field has been set.
func (o *PartyFVO) HasCreditRating() bool {
	if o != nil && !IsNil(o.CreditRating) {
		return true
	}

	return false
}

// SetCreditRating gets a reference to the given []PartyCreditProfileFVO and assigns it to the CreditRating field.
func (o *PartyFVO) SetCreditRating(v []PartyCreditProfileFVO) {
	o.CreditRating = v
}

// GetRelatedParty returns the RelatedParty field value if set, zero value otherwise.
func (o *PartyFVO) GetRelatedParty() []RelatedPartyOrPartyRoleFVO {
	if o == nil || IsNil(o.RelatedParty) {
		var ret []RelatedPartyOrPartyRoleFVO
		return ret
	}
	return o.RelatedParty
}

// GetRelatedPartyOk returns a tuple with the RelatedParty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetRelatedPartyOk() ([]RelatedPartyOrPartyRoleFVO, bool) {
	if o == nil || IsNil(o.RelatedParty) {
		return nil, false
	}
	return o.RelatedParty, true
}

// HasRelatedParty returns a boolean if a field has been set.
func (o *PartyFVO) HasRelatedParty() bool {
	if o != nil && !IsNil(o.RelatedParty) {
		return true
	}

	return false
}

// SetRelatedParty gets a reference to the given []RelatedPartyOrPartyRoleFVO and assigns it to the RelatedParty field.
func (o *PartyFVO) SetRelatedParty(v []RelatedPartyOrPartyRoleFVO) {
	o.RelatedParty = v
}

// GetContactMedium returns the ContactMedium field value if set, zero value otherwise.
func (o *PartyFVO) GetContactMedium() []ContactMediumFVO {
	if o == nil || IsNil(o.ContactMedium) {
		var ret []ContactMediumFVO
		return ret
	}
	return o.ContactMedium
}

// GetContactMediumOk returns a tuple with the ContactMedium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyFVO) GetContactMediumOk() ([]ContactMediumFVO, bool) {
	if o == nil || IsNil(o.ContactMedium) {
		return nil, false
	}
	return o.ContactMedium, true
}

// HasContactMedium returns a boolean if a field has been set.
func (o *PartyFVO) HasContactMedium() bool {
	if o != nil && !IsNil(o.ContactMedium) {
		return true
	}

	return false
}

// SetContactMedium gets a reference to the given []ContactMediumFVO and assigns it to the ContactMedium field.
func (o *PartyFVO) SetContactMedium(v []ContactMediumFVO) {
	o.ContactMedium = v
}

func (o PartyFVO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartyFVO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@type"] = o.Type
	if !IsNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !IsNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExternalReference) {
		toSerialize["externalReference"] = o.ExternalReference
	}
	if !IsNil(o.PartyCharacteristic) {
		toSerialize["partyCharacteristic"] = o.PartyCharacteristic
	}
	if !IsNil(o.TaxExemptionCertificate) {
		toSerialize["taxExemptionCertificate"] = o.TaxExemptionCertificate
	}
	if !IsNil(o.CreditRating) {
		toSerialize["creditRating"] = o.CreditRating
	}
	if !IsNil(o.RelatedParty) {
		toSerialize["relatedParty"] = o.RelatedParty
	}
	if !IsNil(o.ContactMedium) {
		toSerialize["contactMedium"] = o.ContactMedium
	}
	return toSerialize, nil
}

func (o *PartyFVO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPartyFVO := _PartyFVO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPartyFVO)

	if err != nil {
		return err
	}

	*o = PartyFVO(varPartyFVO)

	return err
}

type NullablePartyFVO struct {
	value *PartyFVO
	isSet bool
}

func (v NullablePartyFVO) Get() *PartyFVO {
	return v.value
}

func (v *NullablePartyFVO) Set(val *PartyFVO) {
	v.value = val
	v.isSet = true
}

func (v NullablePartyFVO) IsSet() bool {
	return v.isSet
}

func (v *NullablePartyFVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartyFVO(val *PartyFVO) *NullablePartyFVO {
	return &NullablePartyFVO{value: val, isSet: true}
}

func (v NullablePartyFVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartyFVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


