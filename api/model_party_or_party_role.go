/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PartyOrPartyRole - 
type PartyOrPartyRole struct {
	BusinessPartner *BusinessPartner
	Consumer *Consumer
	Individual *Individual
	Organization *Organization
	PartyRef *PartyRef
	PartyRole *PartyRole
	PartyRoleRef *PartyRoleRef
	Producer *Producer
	Supplier *Supplier
}

// BusinessPartnerAsPartyOrPartyRole is a convenience function that returns BusinessPartner wrapped in PartyOrPartyRole
func BusinessPartnerAsPartyOrPartyRole(v *BusinessPartner) PartyOrPartyRole {
	return PartyOrPartyRole{
		BusinessPartner: v,
	}
}

// ConsumerAsPartyOrPartyRole is a convenience function that returns Consumer wrapped in PartyOrPartyRole
func ConsumerAsPartyOrPartyRole(v *Consumer) PartyOrPartyRole {
	return PartyOrPartyRole{
		Consumer: v,
	}
}

// IndividualAsPartyOrPartyRole is a convenience function that returns Individual wrapped in PartyOrPartyRole
func IndividualAsPartyOrPartyRole(v *Individual) PartyOrPartyRole {
	return PartyOrPartyRole{
		Individual: v,
	}
}

// OrganizationAsPartyOrPartyRole is a convenience function that returns Organization wrapped in PartyOrPartyRole
func OrganizationAsPartyOrPartyRole(v *Organization) PartyOrPartyRole {
	return PartyOrPartyRole{
		Organization: v,
	}
}

// PartyRefAsPartyOrPartyRole is a convenience function that returns PartyRef wrapped in PartyOrPartyRole
func PartyRefAsPartyOrPartyRole(v *PartyRef) PartyOrPartyRole {
	return PartyOrPartyRole{
		PartyRef: v,
	}
}

// PartyRoleAsPartyOrPartyRole is a convenience function that returns PartyRole wrapped in PartyOrPartyRole
func PartyRoleAsPartyOrPartyRole(v *PartyRole) PartyOrPartyRole {
	return PartyOrPartyRole{
		PartyRole: v,
	}
}

// PartyRoleRefAsPartyOrPartyRole is a convenience function that returns PartyRoleRef wrapped in PartyOrPartyRole
func PartyRoleRefAsPartyOrPartyRole(v *PartyRoleRef) PartyOrPartyRole {
	return PartyOrPartyRole{
		PartyRoleRef: v,
	}
}

// ProducerAsPartyOrPartyRole is a convenience function that returns Producer wrapped in PartyOrPartyRole
func ProducerAsPartyOrPartyRole(v *Producer) PartyOrPartyRole {
	return PartyOrPartyRole{
		Producer: v,
	}
}

// SupplierAsPartyOrPartyRole is a convenience function that returns Supplier wrapped in PartyOrPartyRole
func SupplierAsPartyOrPartyRole(v *Supplier) PartyOrPartyRole {
	return PartyOrPartyRole{
		Supplier: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PartyOrPartyRole) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BusinessPartner
	err = newStrictDecoder(data).Decode(&dst.BusinessPartner)
	if err == nil {
		jsonBusinessPartner, _ := json.Marshal(dst.BusinessPartner)
		if string(jsonBusinessPartner) == "{}" { // empty struct
			dst.BusinessPartner = nil
		} else {
			if err = validator.Validate(dst.BusinessPartner); err != nil {
				dst.BusinessPartner = nil
			} else {
				match++
			}
		}
	} else {
		dst.BusinessPartner = nil
	}

	// try to unmarshal data into Consumer
	err = newStrictDecoder(data).Decode(&dst.Consumer)
	if err == nil {
		jsonConsumer, _ := json.Marshal(dst.Consumer)
		if string(jsonConsumer) == "{}" { // empty struct
			dst.Consumer = nil
		} else {
			if err = validator.Validate(dst.Consumer); err != nil {
				dst.Consumer = nil
			} else {
				match++
			}
		}
	} else {
		dst.Consumer = nil
	}

	// try to unmarshal data into Individual
	err = newStrictDecoder(data).Decode(&dst.Individual)
	if err == nil {
		jsonIndividual, _ := json.Marshal(dst.Individual)
		if string(jsonIndividual) == "{}" { // empty struct
			dst.Individual = nil
		} else {
			if err = validator.Validate(dst.Individual); err != nil {
				dst.Individual = nil
			} else {
				match++
			}
		}
	} else {
		dst.Individual = nil
	}

	// try to unmarshal data into Organization
	err = newStrictDecoder(data).Decode(&dst.Organization)
	if err == nil {
		jsonOrganization, _ := json.Marshal(dst.Organization)
		if string(jsonOrganization) == "{}" { // empty struct
			dst.Organization = nil
		} else {
			if err = validator.Validate(dst.Organization); err != nil {
				dst.Organization = nil
			} else {
				match++
			}
		}
	} else {
		dst.Organization = nil
	}

	// try to unmarshal data into PartyRef
	err = newStrictDecoder(data).Decode(&dst.PartyRef)
	if err == nil {
		jsonPartyRef, _ := json.Marshal(dst.PartyRef)
		if string(jsonPartyRef) == "{}" { // empty struct
			dst.PartyRef = nil
		} else {
			if err = validator.Validate(dst.PartyRef); err != nil {
				dst.PartyRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.PartyRef = nil
	}

	// try to unmarshal data into PartyRole
	err = newStrictDecoder(data).Decode(&dst.PartyRole)
	if err == nil {
		jsonPartyRole, _ := json.Marshal(dst.PartyRole)
		if string(jsonPartyRole) == "{}" { // empty struct
			dst.PartyRole = nil
		} else {
			if err = validator.Validate(dst.PartyRole); err != nil {
				dst.PartyRole = nil
			} else {
				match++
			}
		}
	} else {
		dst.PartyRole = nil
	}

	// try to unmarshal data into PartyRoleRef
	err = newStrictDecoder(data).Decode(&dst.PartyRoleRef)
	if err == nil {
		jsonPartyRoleRef, _ := json.Marshal(dst.PartyRoleRef)
		if string(jsonPartyRoleRef) == "{}" { // empty struct
			dst.PartyRoleRef = nil
		} else {
			if err = validator.Validate(dst.PartyRoleRef); err != nil {
				dst.PartyRoleRef = nil
			} else {
				match++
			}
		}
	} else {
		dst.PartyRoleRef = nil
	}

	// try to unmarshal data into Producer
	err = newStrictDecoder(data).Decode(&dst.Producer)
	if err == nil {
		jsonProducer, _ := json.Marshal(dst.Producer)
		if string(jsonProducer) == "{}" { // empty struct
			dst.Producer = nil
		} else {
			if err = validator.Validate(dst.Producer); err != nil {
				dst.Producer = nil
			} else {
				match++
			}
		}
	} else {
		dst.Producer = nil
	}

	// try to unmarshal data into Supplier
	err = newStrictDecoder(data).Decode(&dst.Supplier)
	if err == nil {
		jsonSupplier, _ := json.Marshal(dst.Supplier)
		if string(jsonSupplier) == "{}" { // empty struct
			dst.Supplier = nil
		} else {
			if err = validator.Validate(dst.Supplier); err != nil {
				dst.Supplier = nil
			} else {
				match++
			}
		}
	} else {
		dst.Supplier = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BusinessPartner = nil
		dst.Consumer = nil
		dst.Individual = nil
		dst.Organization = nil
		dst.PartyRef = nil
		dst.PartyRole = nil
		dst.PartyRoleRef = nil
		dst.Producer = nil
		dst.Supplier = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PartyOrPartyRole)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PartyOrPartyRole)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PartyOrPartyRole) MarshalJSON() ([]byte, error) {
	if src.BusinessPartner != nil {
		return json.Marshal(&src.BusinessPartner)
	}

	if src.Consumer != nil {
		return json.Marshal(&src.Consumer)
	}

	if src.Individual != nil {
		return json.Marshal(&src.Individual)
	}

	if src.Organization != nil {
		return json.Marshal(&src.Organization)
	}

	if src.PartyRef != nil {
		return json.Marshal(&src.PartyRef)
	}

	if src.PartyRole != nil {
		return json.Marshal(&src.PartyRole)
	}

	if src.PartyRoleRef != nil {
		return json.Marshal(&src.PartyRoleRef)
	}

	if src.Producer != nil {
		return json.Marshal(&src.Producer)
	}

	if src.Supplier != nil {
		return json.Marshal(&src.Supplier)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PartyOrPartyRole) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BusinessPartner != nil {
		return obj.BusinessPartner
	}

	if obj.Consumer != nil {
		return obj.Consumer
	}

	if obj.Individual != nil {
		return obj.Individual
	}

	if obj.Organization != nil {
		return obj.Organization
	}

	if obj.PartyRef != nil {
		return obj.PartyRef
	}

	if obj.PartyRole != nil {
		return obj.PartyRole
	}

	if obj.PartyRoleRef != nil {
		return obj.PartyRoleRef
	}

	if obj.Producer != nil {
		return obj.Producer
	}

	if obj.Supplier != nil {
		return obj.Supplier
	}

	// all schemas are nil
	return nil
}

type NullablePartyOrPartyRole struct {
	value *PartyOrPartyRole
	isSet bool
}

func (v NullablePartyOrPartyRole) Get() *PartyOrPartyRole {
	return v.value
}

func (v *NullablePartyOrPartyRole) Set(val *PartyOrPartyRole) {
	v.value = val
	v.isSet = true
}

func (v NullablePartyOrPartyRole) IsSet() bool {
	return v.isSet
}

func (v *NullablePartyOrPartyRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartyOrPartyRole(val *PartyOrPartyRole) *NullablePartyOrPartyRole {
	return &NullablePartyOrPartyRole{value: val, isSet: true}
}

func (v NullablePartyOrPartyRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartyOrPartyRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


