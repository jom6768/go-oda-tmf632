/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the IndividualAttributeValueChangeEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndividualAttributeValueChangeEvent{}

// IndividualAttributeValueChangeEvent struct for IndividualAttributeValueChangeEvent
type IndividualAttributeValueChangeEvent struct {
	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// Hyperlink reference
	Href *string `json:"href,omitempty"`
	// unique identifier
	Id *string `json:"id,omitempty"`
	// The correlation id for this event.
	CorrelationId *string `json:"correlationId,omitempty"`
	// The domain of the event.
	Domain *string `json:"domain,omitempty"`
	// The title of the event.
	Title *string `json:"title,omitempty"`
	// An explnatory of the event.
	Description *string `json:"description,omitempty"`
	// A priority.
	Priority *string `json:"priority,omitempty"`
	// The time the event occurred.
	TimeOccurred *time.Time `json:"timeOccurred,omitempty"`
	Source *EntityRef `json:"source,omitempty"`
	ReportingSystem *EntityRef `json:"reportingSystem,omitempty"`
	RelatedParty []RelatedPartyRefOrPartyRoleRef `json:"relatedParty,omitempty"`
	AnalyticCharacteristic []Characteristic `json:"analyticCharacteristic,omitempty"`
	// The identifier of the notification.
	EventId *string `json:"eventId,omitempty"`
	// Time of the event occurrence.
	EventTime *time.Time `json:"eventTime,omitempty"`
	// The type of the notification.
	EventType *string `json:"eventType,omitempty"`
	Event *IndividualAttributeValueChangeEventPayload `json:"event,omitempty"`
}

type _IndividualAttributeValueChangeEvent IndividualAttributeValueChangeEvent

// NewIndividualAttributeValueChangeEvent instantiates a new IndividualAttributeValueChangeEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndividualAttributeValueChangeEvent(type_ string) *IndividualAttributeValueChangeEvent {
	this := IndividualAttributeValueChangeEvent{}
	this.Type = type_
	return &this
}

// NewIndividualAttributeValueChangeEventWithDefaults instantiates a new IndividualAttributeValueChangeEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndividualAttributeValueChangeEventWithDefaults() *IndividualAttributeValueChangeEvent {
	this := IndividualAttributeValueChangeEvent{}
	return &this
}

// GetType returns the Type field value
func (o *IndividualAttributeValueChangeEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IndividualAttributeValueChangeEvent) SetType(v string) {
	o.Type = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetBaseType() string {
	if o == nil || IsNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetBaseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *IndividualAttributeValueChangeEvent) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetSchemaLocation() string {
	if o == nil || IsNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetSchemaLocationOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaLocation) {
		return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasSchemaLocation() bool {
	if o != nil && !IsNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *IndividualAttributeValueChangeEvent) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *IndividualAttributeValueChangeEvent) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IndividualAttributeValueChangeEvent) SetId(v string) {
	o.Id = &v
}

// GetCorrelationId returns the CorrelationId field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetCorrelationId() string {
	if o == nil || IsNil(o.CorrelationId) {
		var ret string
		return ret
	}
	return *o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetCorrelationIdOk() (*string, bool) {
	if o == nil || IsNil(o.CorrelationId) {
		return nil, false
	}
	return o.CorrelationId, true
}

// HasCorrelationId returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasCorrelationId() bool {
	if o != nil && !IsNil(o.CorrelationId) {
		return true
	}

	return false
}

// SetCorrelationId gets a reference to the given string and assigns it to the CorrelationId field.
func (o *IndividualAttributeValueChangeEvent) SetCorrelationId(v string) {
	o.CorrelationId = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *IndividualAttributeValueChangeEvent) SetDomain(v string) {
	o.Domain = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *IndividualAttributeValueChangeEvent) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IndividualAttributeValueChangeEvent) SetDescription(v string) {
	o.Description = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *IndividualAttributeValueChangeEvent) SetPriority(v string) {
	o.Priority = &v
}

// GetTimeOccurred returns the TimeOccurred field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetTimeOccurred() time.Time {
	if o == nil || IsNil(o.TimeOccurred) {
		var ret time.Time
		return ret
	}
	return *o.TimeOccurred
}

// GetTimeOccurredOk returns a tuple with the TimeOccurred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetTimeOccurredOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeOccurred) {
		return nil, false
	}
	return o.TimeOccurred, true
}

// HasTimeOccurred returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasTimeOccurred() bool {
	if o != nil && !IsNil(o.TimeOccurred) {
		return true
	}

	return false
}

// SetTimeOccurred gets a reference to the given time.Time and assigns it to the TimeOccurred field.
func (o *IndividualAttributeValueChangeEvent) SetTimeOccurred(v time.Time) {
	o.TimeOccurred = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetSource() EntityRef {
	if o == nil || IsNil(o.Source) {
		var ret EntityRef
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetSourceOk() (*EntityRef, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given EntityRef and assigns it to the Source field.
func (o *IndividualAttributeValueChangeEvent) SetSource(v EntityRef) {
	o.Source = &v
}

// GetReportingSystem returns the ReportingSystem field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetReportingSystem() EntityRef {
	if o == nil || IsNil(o.ReportingSystem) {
		var ret EntityRef
		return ret
	}
	return *o.ReportingSystem
}

// GetReportingSystemOk returns a tuple with the ReportingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetReportingSystemOk() (*EntityRef, bool) {
	if o == nil || IsNil(o.ReportingSystem) {
		return nil, false
	}
	return o.ReportingSystem, true
}

// HasReportingSystem returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasReportingSystem() bool {
	if o != nil && !IsNil(o.ReportingSystem) {
		return true
	}

	return false
}

// SetReportingSystem gets a reference to the given EntityRef and assigns it to the ReportingSystem field.
func (o *IndividualAttributeValueChangeEvent) SetReportingSystem(v EntityRef) {
	o.ReportingSystem = &v
}

// GetRelatedParty returns the RelatedParty field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetRelatedParty() []RelatedPartyRefOrPartyRoleRef {
	if o == nil || IsNil(o.RelatedParty) {
		var ret []RelatedPartyRefOrPartyRoleRef
		return ret
	}
	return o.RelatedParty
}

// GetRelatedPartyOk returns a tuple with the RelatedParty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetRelatedPartyOk() ([]RelatedPartyRefOrPartyRoleRef, bool) {
	if o == nil || IsNil(o.RelatedParty) {
		return nil, false
	}
	return o.RelatedParty, true
}

// HasRelatedParty returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasRelatedParty() bool {
	if o != nil && !IsNil(o.RelatedParty) {
		return true
	}

	return false
}

// SetRelatedParty gets a reference to the given []RelatedPartyRefOrPartyRoleRef and assigns it to the RelatedParty field.
func (o *IndividualAttributeValueChangeEvent) SetRelatedParty(v []RelatedPartyRefOrPartyRoleRef) {
	o.RelatedParty = v
}

// GetAnalyticCharacteristic returns the AnalyticCharacteristic field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetAnalyticCharacteristic() []Characteristic {
	if o == nil || IsNil(o.AnalyticCharacteristic) {
		var ret []Characteristic
		return ret
	}
	return o.AnalyticCharacteristic
}

// GetAnalyticCharacteristicOk returns a tuple with the AnalyticCharacteristic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetAnalyticCharacteristicOk() ([]Characteristic, bool) {
	if o == nil || IsNil(o.AnalyticCharacteristic) {
		return nil, false
	}
	return o.AnalyticCharacteristic, true
}

// HasAnalyticCharacteristic returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasAnalyticCharacteristic() bool {
	if o != nil && !IsNil(o.AnalyticCharacteristic) {
		return true
	}

	return false
}

// SetAnalyticCharacteristic gets a reference to the given []Characteristic and assigns it to the AnalyticCharacteristic field.
func (o *IndividualAttributeValueChangeEvent) SetAnalyticCharacteristic(v []Characteristic) {
	o.AnalyticCharacteristic = v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *IndividualAttributeValueChangeEvent) SetEventId(v string) {
	o.EventId = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetEventTime() time.Time {
	if o == nil || IsNil(o.EventTime) {
		var ret time.Time
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetEventTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventTime) {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasEventTime() bool {
	if o != nil && !IsNil(o.EventTime) {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given time.Time and assigns it to the EventTime field.
func (o *IndividualAttributeValueChangeEvent) SetEventTime(v time.Time) {
	o.EventTime = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *IndividualAttributeValueChangeEvent) SetEventType(v string) {
	o.EventType = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *IndividualAttributeValueChangeEvent) GetEvent() IndividualAttributeValueChangeEventPayload {
	if o == nil || IsNil(o.Event) {
		var ret IndividualAttributeValueChangeEventPayload
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndividualAttributeValueChangeEvent) GetEventOk() (*IndividualAttributeValueChangeEventPayload, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *IndividualAttributeValueChangeEvent) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given IndividualAttributeValueChangeEventPayload and assigns it to the Event field.
func (o *IndividualAttributeValueChangeEvent) SetEvent(v IndividualAttributeValueChangeEventPayload) {
	o.Event = &v
}

func (o IndividualAttributeValueChangeEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndividualAttributeValueChangeEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@type"] = o.Type
	if !IsNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !IsNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CorrelationId) {
		toSerialize["correlationId"] = o.CorrelationId
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.TimeOccurred) {
		toSerialize["timeOccurred"] = o.TimeOccurred
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.ReportingSystem) {
		toSerialize["reportingSystem"] = o.ReportingSystem
	}
	if !IsNil(o.RelatedParty) {
		toSerialize["relatedParty"] = o.RelatedParty
	}
	if !IsNil(o.AnalyticCharacteristic) {
		toSerialize["analyticCharacteristic"] = o.AnalyticCharacteristic
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.EventTime) {
		toSerialize["eventTime"] = o.EventTime
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	return toSerialize, nil
}

func (o *IndividualAttributeValueChangeEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIndividualAttributeValueChangeEvent := _IndividualAttributeValueChangeEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIndividualAttributeValueChangeEvent)

	if err != nil {
		return err
	}

	*o = IndividualAttributeValueChangeEvent(varIndividualAttributeValueChangeEvent)

	return err
}

type NullableIndividualAttributeValueChangeEvent struct {
	value *IndividualAttributeValueChangeEvent
	isSet bool
}

func (v NullableIndividualAttributeValueChangeEvent) Get() *IndividualAttributeValueChangeEvent {
	return v.value
}

func (v *NullableIndividualAttributeValueChangeEvent) Set(val *IndividualAttributeValueChangeEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableIndividualAttributeValueChangeEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableIndividualAttributeValueChangeEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndividualAttributeValueChangeEvent(val *IndividualAttributeValueChangeEvent) *NullableIndividualAttributeValueChangeEvent {
	return &NullableIndividualAttributeValueChangeEvent{value: val, isSet: true}
}

func (v NullableIndividualAttributeValueChangeEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndividualAttributeValueChangeEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


