/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrganizationMVO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationMVO{}

// OrganizationMVO struct for OrganizationMVO
type OrganizationMVO struct {
	PartyMVO
	// If value is true, the organization is a legal entity known by a national referential.
	IsLegalEntity *bool `json:"isLegalEntity,omitempty"`
	// If value is true, the organization is the head office
	IsHeadOffice *bool `json:"isHeadOffice,omitempty"`
	// Type of Organization (company, department...)
	OrganizationType *string `json:"organizationType,omitempty"`
	ExistsDuring *TimePeriod `json:"existsDuring,omitempty"`
	// Organization name (department name for example)
	Name *string `json:"name,omitempty"`
	// Type of the name : Co, Inc, Ltd, etc.
	NameType *string `json:"nameType,omitempty"`
	Status *OrganizationStateType `json:"status,omitempty"`
	// List of additional names by which the organization is known
	OtherName []OtherNameOrganizationMVO `json:"otherName,omitempty"`
	// List of official identifiers given to the organization, for example company number in the registry of companies
	OrganizationIdentification []OrganizationIdentificationMVO `json:"organizationIdentification,omitempty"`
	// List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts
	OrganizationChildRelationship []OrganizationChildRelationshipMVO `json:"organizationChildRelationship,omitempty"`
	OrganizationParentRelationship *OrganizationParentRelationshipMVO `json:"organizationParentRelationship,omitempty"`
	// Name that the organization (unit) trades under
	TradingName *string `json:"tradingName,omitempty"`
}

type _OrganizationMVO OrganizationMVO

// NewOrganizationMVO instantiates a new OrganizationMVO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationMVO(type_ string) *OrganizationMVO {
	this := OrganizationMVO{}
	this.Type = type_
	return &this
}

// NewOrganizationMVOWithDefaults instantiates a new OrganizationMVO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationMVOWithDefaults() *OrganizationMVO {
	this := OrganizationMVO{}
	return &this
}

// GetIsLegalEntity returns the IsLegalEntity field value if set, zero value otherwise.
func (o *OrganizationMVO) GetIsLegalEntity() bool {
	if o == nil || IsNil(o.IsLegalEntity) {
		var ret bool
		return ret
	}
	return *o.IsLegalEntity
}

// GetIsLegalEntityOk returns a tuple with the IsLegalEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetIsLegalEntityOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLegalEntity) {
		return nil, false
	}
	return o.IsLegalEntity, true
}

// HasIsLegalEntity returns a boolean if a field has been set.
func (o *OrganizationMVO) HasIsLegalEntity() bool {
	if o != nil && !IsNil(o.IsLegalEntity) {
		return true
	}

	return false
}

// SetIsLegalEntity gets a reference to the given bool and assigns it to the IsLegalEntity field.
func (o *OrganizationMVO) SetIsLegalEntity(v bool) {
	o.IsLegalEntity = &v
}

// GetIsHeadOffice returns the IsHeadOffice field value if set, zero value otherwise.
func (o *OrganizationMVO) GetIsHeadOffice() bool {
	if o == nil || IsNil(o.IsHeadOffice) {
		var ret bool
		return ret
	}
	return *o.IsHeadOffice
}

// GetIsHeadOfficeOk returns a tuple with the IsHeadOffice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetIsHeadOfficeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHeadOffice) {
		return nil, false
	}
	return o.IsHeadOffice, true
}

// HasIsHeadOffice returns a boolean if a field has been set.
func (o *OrganizationMVO) HasIsHeadOffice() bool {
	if o != nil && !IsNil(o.IsHeadOffice) {
		return true
	}

	return false
}

// SetIsHeadOffice gets a reference to the given bool and assigns it to the IsHeadOffice field.
func (o *OrganizationMVO) SetIsHeadOffice(v bool) {
	o.IsHeadOffice = &v
}

// GetOrganizationType returns the OrganizationType field value if set, zero value otherwise.
func (o *OrganizationMVO) GetOrganizationType() string {
	if o == nil || IsNil(o.OrganizationType) {
		var ret string
		return ret
	}
	return *o.OrganizationType
}

// GetOrganizationTypeOk returns a tuple with the OrganizationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetOrganizationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationType) {
		return nil, false
	}
	return o.OrganizationType, true
}

// HasOrganizationType returns a boolean if a field has been set.
func (o *OrganizationMVO) HasOrganizationType() bool {
	if o != nil && !IsNil(o.OrganizationType) {
		return true
	}

	return false
}

// SetOrganizationType gets a reference to the given string and assigns it to the OrganizationType field.
func (o *OrganizationMVO) SetOrganizationType(v string) {
	o.OrganizationType = &v
}

// GetExistsDuring returns the ExistsDuring field value if set, zero value otherwise.
func (o *OrganizationMVO) GetExistsDuring() TimePeriod {
	if o == nil || IsNil(o.ExistsDuring) {
		var ret TimePeriod
		return ret
	}
	return *o.ExistsDuring
}

// GetExistsDuringOk returns a tuple with the ExistsDuring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetExistsDuringOk() (*TimePeriod, bool) {
	if o == nil || IsNil(o.ExistsDuring) {
		return nil, false
	}
	return o.ExistsDuring, true
}

// HasExistsDuring returns a boolean if a field has been set.
func (o *OrganizationMVO) HasExistsDuring() bool {
	if o != nil && !IsNil(o.ExistsDuring) {
		return true
	}

	return false
}

// SetExistsDuring gets a reference to the given TimePeriod and assigns it to the ExistsDuring field.
func (o *OrganizationMVO) SetExistsDuring(v TimePeriod) {
	o.ExistsDuring = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrganizationMVO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrganizationMVO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrganizationMVO) SetName(v string) {
	o.Name = &v
}

// GetNameType returns the NameType field value if set, zero value otherwise.
func (o *OrganizationMVO) GetNameType() string {
	if o == nil || IsNil(o.NameType) {
		var ret string
		return ret
	}
	return *o.NameType
}

// GetNameTypeOk returns a tuple with the NameType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetNameTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NameType) {
		return nil, false
	}
	return o.NameType, true
}

// HasNameType returns a boolean if a field has been set.
func (o *OrganizationMVO) HasNameType() bool {
	if o != nil && !IsNil(o.NameType) {
		return true
	}

	return false
}

// SetNameType gets a reference to the given string and assigns it to the NameType field.
func (o *OrganizationMVO) SetNameType(v string) {
	o.NameType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrganizationMVO) GetStatus() OrganizationStateType {
	if o == nil || IsNil(o.Status) {
		var ret OrganizationStateType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetStatusOk() (*OrganizationStateType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrganizationMVO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OrganizationStateType and assigns it to the Status field.
func (o *OrganizationMVO) SetStatus(v OrganizationStateType) {
	o.Status = &v
}

// GetOtherName returns the OtherName field value if set, zero value otherwise.
func (o *OrganizationMVO) GetOtherName() []OtherNameOrganizationMVO {
	if o == nil || IsNil(o.OtherName) {
		var ret []OtherNameOrganizationMVO
		return ret
	}
	return o.OtherName
}

// GetOtherNameOk returns a tuple with the OtherName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetOtherNameOk() ([]OtherNameOrganizationMVO, bool) {
	if o == nil || IsNil(o.OtherName) {
		return nil, false
	}
	return o.OtherName, true
}

// HasOtherName returns a boolean if a field has been set.
func (o *OrganizationMVO) HasOtherName() bool {
	if o != nil && !IsNil(o.OtherName) {
		return true
	}

	return false
}

// SetOtherName gets a reference to the given []OtherNameOrganizationMVO and assigns it to the OtherName field.
func (o *OrganizationMVO) SetOtherName(v []OtherNameOrganizationMVO) {
	o.OtherName = v
}

// GetOrganizationIdentification returns the OrganizationIdentification field value if set, zero value otherwise.
func (o *OrganizationMVO) GetOrganizationIdentification() []OrganizationIdentificationMVO {
	if o == nil || IsNil(o.OrganizationIdentification) {
		var ret []OrganizationIdentificationMVO
		return ret
	}
	return o.OrganizationIdentification
}

// GetOrganizationIdentificationOk returns a tuple with the OrganizationIdentification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetOrganizationIdentificationOk() ([]OrganizationIdentificationMVO, bool) {
	if o == nil || IsNil(o.OrganizationIdentification) {
		return nil, false
	}
	return o.OrganizationIdentification, true
}

// HasOrganizationIdentification returns a boolean if a field has been set.
func (o *OrganizationMVO) HasOrganizationIdentification() bool {
	if o != nil && !IsNil(o.OrganizationIdentification) {
		return true
	}

	return false
}

// SetOrganizationIdentification gets a reference to the given []OrganizationIdentificationMVO and assigns it to the OrganizationIdentification field.
func (o *OrganizationMVO) SetOrganizationIdentification(v []OrganizationIdentificationMVO) {
	o.OrganizationIdentification = v
}

// GetOrganizationChildRelationship returns the OrganizationChildRelationship field value if set, zero value otherwise.
func (o *OrganizationMVO) GetOrganizationChildRelationship() []OrganizationChildRelationshipMVO {
	if o == nil || IsNil(o.OrganizationChildRelationship) {
		var ret []OrganizationChildRelationshipMVO
		return ret
	}
	return o.OrganizationChildRelationship
}

// GetOrganizationChildRelationshipOk returns a tuple with the OrganizationChildRelationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetOrganizationChildRelationshipOk() ([]OrganizationChildRelationshipMVO, bool) {
	if o == nil || IsNil(o.OrganizationChildRelationship) {
		return nil, false
	}
	return o.OrganizationChildRelationship, true
}

// HasOrganizationChildRelationship returns a boolean if a field has been set.
func (o *OrganizationMVO) HasOrganizationChildRelationship() bool {
	if o != nil && !IsNil(o.OrganizationChildRelationship) {
		return true
	}

	return false
}

// SetOrganizationChildRelationship gets a reference to the given []OrganizationChildRelationshipMVO and assigns it to the OrganizationChildRelationship field.
func (o *OrganizationMVO) SetOrganizationChildRelationship(v []OrganizationChildRelationshipMVO) {
	o.OrganizationChildRelationship = v
}

// GetOrganizationParentRelationship returns the OrganizationParentRelationship field value if set, zero value otherwise.
func (o *OrganizationMVO) GetOrganizationParentRelationship() OrganizationParentRelationshipMVO {
	if o == nil || IsNil(o.OrganizationParentRelationship) {
		var ret OrganizationParentRelationshipMVO
		return ret
	}
	return *o.OrganizationParentRelationship
}

// GetOrganizationParentRelationshipOk returns a tuple with the OrganizationParentRelationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetOrganizationParentRelationshipOk() (*OrganizationParentRelationshipMVO, bool) {
	if o == nil || IsNil(o.OrganizationParentRelationship) {
		return nil, false
	}
	return o.OrganizationParentRelationship, true
}

// HasOrganizationParentRelationship returns a boolean if a field has been set.
func (o *OrganizationMVO) HasOrganizationParentRelationship() bool {
	if o != nil && !IsNil(o.OrganizationParentRelationship) {
		return true
	}

	return false
}

// SetOrganizationParentRelationship gets a reference to the given OrganizationParentRelationshipMVO and assigns it to the OrganizationParentRelationship field.
func (o *OrganizationMVO) SetOrganizationParentRelationship(v OrganizationParentRelationshipMVO) {
	o.OrganizationParentRelationship = &v
}

// GetTradingName returns the TradingName field value if set, zero value otherwise.
func (o *OrganizationMVO) GetTradingName() string {
	if o == nil || IsNil(o.TradingName) {
		var ret string
		return ret
	}
	return *o.TradingName
}

// GetTradingNameOk returns a tuple with the TradingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationMVO) GetTradingNameOk() (*string, bool) {
	if o == nil || IsNil(o.TradingName) {
		return nil, false
	}
	return o.TradingName, true
}

// HasTradingName returns a boolean if a field has been set.
func (o *OrganizationMVO) HasTradingName() bool {
	if o != nil && !IsNil(o.TradingName) {
		return true
	}

	return false
}

// SetTradingName gets a reference to the given string and assigns it to the TradingName field.
func (o *OrganizationMVO) SetTradingName(v string) {
	o.TradingName = &v
}

func (o OrganizationMVO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationMVO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPartyMVO, errPartyMVO := json.Marshal(o.PartyMVO)
	if errPartyMVO != nil {
		return map[string]interface{}{}, errPartyMVO
	}
	errPartyMVO = json.Unmarshal([]byte(serializedPartyMVO), &toSerialize)
	if errPartyMVO != nil {
		return map[string]interface{}{}, errPartyMVO
	}
	if !IsNil(o.IsLegalEntity) {
		toSerialize["isLegalEntity"] = o.IsLegalEntity
	}
	if !IsNil(o.IsHeadOffice) {
		toSerialize["isHeadOffice"] = o.IsHeadOffice
	}
	if !IsNil(o.OrganizationType) {
		toSerialize["organizationType"] = o.OrganizationType
	}
	if !IsNil(o.ExistsDuring) {
		toSerialize["existsDuring"] = o.ExistsDuring
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NameType) {
		toSerialize["nameType"] = o.NameType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.OtherName) {
		toSerialize["otherName"] = o.OtherName
	}
	if !IsNil(o.OrganizationIdentification) {
		toSerialize["organizationIdentification"] = o.OrganizationIdentification
	}
	if !IsNil(o.OrganizationChildRelationship) {
		toSerialize["organizationChildRelationship"] = o.OrganizationChildRelationship
	}
	if !IsNil(o.OrganizationParentRelationship) {
		toSerialize["organizationParentRelationship"] = o.OrganizationParentRelationship
	}
	if !IsNil(o.TradingName) {
		toSerialize["tradingName"] = o.TradingName
	}
	return toSerialize, nil
}

func (o *OrganizationMVO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationMVO := _OrganizationMVO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrganizationMVO)

	if err != nil {
		return err
	}

	*o = OrganizationMVO(varOrganizationMVO)

	return err
}

type NullableOrganizationMVO struct {
	value *OrganizationMVO
	isSet bool
}

func (v NullableOrganizationMVO) Get() *OrganizationMVO {
	return v.value
}

func (v *NullableOrganizationMVO) Set(val *OrganizationMVO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationMVO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationMVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationMVO(val *OrganizationMVO) *NullableOrganizationMVO {
	return &NullableOrganizationMVO{value: val, isSet: true}
}

func (v NullableOrganizationMVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationMVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


