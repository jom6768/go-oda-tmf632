/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PatchOrganization200Response - struct for PatchOrganization200Response
type PatchOrganization200Response struct {
	Organization *Organization
	ArrayOfOrganization *[]Organization
	String *string
}

// OrganizationAsPatchOrganization200Response is a convenience function that returns Organization wrapped in PatchOrganization200Response
func OrganizationAsPatchOrganization200Response(v *Organization) PatchOrganization200Response {
	return PatchOrganization200Response{
		Organization: v,
	}
}

// []OrganizationAsPatchOrganization200Response is a convenience function that returns []Organization wrapped in PatchOrganization200Response
func ArrayOfOrganizationAsPatchOrganization200Response(v *[]Organization) PatchOrganization200Response {
	return PatchOrganization200Response{
		ArrayOfOrganization: v,
	}
}

// stringAsPatchOrganization200Response is a convenience function that returns string wrapped in PatchOrganization200Response
func StringAsPatchOrganization200Response(v *string) PatchOrganization200Response {
	return PatchOrganization200Response{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PatchOrganization200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Organization
	err = newStrictDecoder(data).Decode(&dst.Organization)
	if err == nil {
		jsonOrganization, _ := json.Marshal(dst.Organization)
		if string(jsonOrganization) == "{}" { // empty struct
			dst.Organization = nil
		} else {
			if err = validator.Validate(dst.Organization); err != nil {
				dst.Organization = nil
			} else {
				match++
			}
		}
	} else {
		dst.Organization = nil
	}

	// try to unmarshal data into ArrayOfOrganization
	err = newStrictDecoder(data).Decode(&dst.ArrayOfOrganization)
	if err == nil {
		jsonArrayOfOrganization, _ := json.Marshal(dst.ArrayOfOrganization)
		if string(jsonArrayOfOrganization) == "{}" { // empty struct
			dst.ArrayOfOrganization = nil
		} else {
			if err = validator.Validate(dst.ArrayOfOrganization); err != nil {
				dst.ArrayOfOrganization = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfOrganization = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Organization = nil
		dst.ArrayOfOrganization = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PatchOrganization200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PatchOrganization200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PatchOrganization200Response) MarshalJSON() ([]byte, error) {
	if src.Organization != nil {
		return json.Marshal(&src.Organization)
	}

	if src.ArrayOfOrganization != nil {
		return json.Marshal(&src.ArrayOfOrganization)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PatchOrganization200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Organization != nil {
		return obj.Organization
	}

	if obj.ArrayOfOrganization != nil {
		return obj.ArrayOfOrganization
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullablePatchOrganization200Response struct {
	value *PatchOrganization200Response
	isSet bool
}

func (v NullablePatchOrganization200Response) Get() *PatchOrganization200Response {
	return v.value
}

func (v *NullablePatchOrganization200Response) Set(val *PatchOrganization200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchOrganization200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchOrganization200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchOrganization200Response(val *PatchOrganization200Response) *NullablePatchOrganization200Response {
	return &NullablePatchOrganization200Response{value: val, isSet: true}
}

func (v NullablePatchOrganization200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchOrganization200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


