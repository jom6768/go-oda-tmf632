/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Individual type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Individual{}

// Individual struct for Individual
type Individual struct {
	Party
	// Gender
	Gender *string `json:"gender,omitempty"`
	// Reference to the place where the individual was born
	PlaceOfBirth *string `json:"placeOfBirth,omitempty"`
	// Country where the individual was born
	CountryOfBirth *string `json:"countryOfBirth,omitempty"`
	// Nationality
	Nationality *string `json:"nationality,omitempty"`
	// Marital status (married, divorced, widow ...)
	MaritalStatus *string `json:"maritalStatus,omitempty"`
	// Birth date
	BirthDate *time.Time `json:"birthDate,omitempty"`
	// Date of death
	DeathDate *time.Time `json:"deathDate,omitempty"`
	// Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ...
	Title *string `json:"title,omitempty"`
	// e.g. Baron, Graf, Earl
	AristocraticTitle *string `json:"aristocraticTitle,omitempty"`
	// e.g.. Sr, Jr, III (the third)
	Generation *string `json:"generation,omitempty"`
	// Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname
	PreferredGivenName *string `json:"preferredGivenName,omitempty"`
	// Family name prefix
	FamilyNamePrefix *string `json:"familyNamePrefix,omitempty"`
	// Legal name or birth name (name one has for official purposes)
	LegalName *string `json:"legalName,omitempty"`
	// Middles name or initial
	MiddleName *string `json:"middleName,omitempty"`
	// Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual
	Name *string `json:"name,omitempty"`
	// A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)
	FormattedName *string `json:"formattedName,omitempty"`
	// Temporary current location of the individual (may be used if the individual has approved its sharing)
	Location *string `json:"location,omitempty"`
	Status *IndividualStateType `json:"status,omitempty"`
	// List of other names by which this individual is known
	OtherName []OtherNameIndividual `json:"otherName,omitempty"`
	// List of official identifications issued to the individual, such as passport, driving licence, social security number
	IndividualIdentification []IndividualIdentification `json:"individualIdentification,omitempty"`
	// List of disabilities suffered by the individual
	Disability []Disability `json:"disability,omitempty"`
	// List of national languages known by the individual
	LanguageAbility []LanguageAbility `json:"languageAbility,omitempty"`
	// List of skills exhibited by the individual
	Skill []Skill `json:"skill,omitempty"`
	// Contains the non-chosen or inherited name. Also known as last name in the Western context
	FamilyName *string `json:"familyName,omitempty"`
	// First name of the individual
	GivenName *string `json:"givenName,omitempty"`
}

type _Individual Individual

// NewIndividual instantiates a new Individual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndividual(type_ string) *Individual {
	this := Individual{}
	this.Type = type_
	return &this
}

// NewIndividualWithDefaults instantiates a new Individual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndividualWithDefaults() *Individual {
	this := Individual{}
	return &this
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *Individual) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *Individual) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *Individual) SetGender(v string) {
	o.Gender = &v
}

// GetPlaceOfBirth returns the PlaceOfBirth field value if set, zero value otherwise.
func (o *Individual) GetPlaceOfBirth() string {
	if o == nil || IsNil(o.PlaceOfBirth) {
		var ret string
		return ret
	}
	return *o.PlaceOfBirth
}

// GetPlaceOfBirthOk returns a tuple with the PlaceOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetPlaceOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceOfBirth) {
		return nil, false
	}
	return o.PlaceOfBirth, true
}

// HasPlaceOfBirth returns a boolean if a field has been set.
func (o *Individual) HasPlaceOfBirth() bool {
	if o != nil && !IsNil(o.PlaceOfBirth) {
		return true
	}

	return false
}

// SetPlaceOfBirth gets a reference to the given string and assigns it to the PlaceOfBirth field.
func (o *Individual) SetPlaceOfBirth(v string) {
	o.PlaceOfBirth = &v
}

// GetCountryOfBirth returns the CountryOfBirth field value if set, zero value otherwise.
func (o *Individual) GetCountryOfBirth() string {
	if o == nil || IsNil(o.CountryOfBirth) {
		var ret string
		return ret
	}
	return *o.CountryOfBirth
}

// GetCountryOfBirthOk returns a tuple with the CountryOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetCountryOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.CountryOfBirth) {
		return nil, false
	}
	return o.CountryOfBirth, true
}

// HasCountryOfBirth returns a boolean if a field has been set.
func (o *Individual) HasCountryOfBirth() bool {
	if o != nil && !IsNil(o.CountryOfBirth) {
		return true
	}

	return false
}

// SetCountryOfBirth gets a reference to the given string and assigns it to the CountryOfBirth field.
func (o *Individual) SetCountryOfBirth(v string) {
	o.CountryOfBirth = &v
}

// GetNationality returns the Nationality field value if set, zero value otherwise.
func (o *Individual) GetNationality() string {
	if o == nil || IsNil(o.Nationality) {
		var ret string
		return ret
	}
	return *o.Nationality
}

// GetNationalityOk returns a tuple with the Nationality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetNationalityOk() (*string, bool) {
	if o == nil || IsNil(o.Nationality) {
		return nil, false
	}
	return o.Nationality, true
}

// HasNationality returns a boolean if a field has been set.
func (o *Individual) HasNationality() bool {
	if o != nil && !IsNil(o.Nationality) {
		return true
	}

	return false
}

// SetNationality gets a reference to the given string and assigns it to the Nationality field.
func (o *Individual) SetNationality(v string) {
	o.Nationality = &v
}

// GetMaritalStatus returns the MaritalStatus field value if set, zero value otherwise.
func (o *Individual) GetMaritalStatus() string {
	if o == nil || IsNil(o.MaritalStatus) {
		var ret string
		return ret
	}
	return *o.MaritalStatus
}

// GetMaritalStatusOk returns a tuple with the MaritalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetMaritalStatusOk() (*string, bool) {
	if o == nil || IsNil(o.MaritalStatus) {
		return nil, false
	}
	return o.MaritalStatus, true
}

// HasMaritalStatus returns a boolean if a field has been set.
func (o *Individual) HasMaritalStatus() bool {
	if o != nil && !IsNil(o.MaritalStatus) {
		return true
	}

	return false
}

// SetMaritalStatus gets a reference to the given string and assigns it to the MaritalStatus field.
func (o *Individual) SetMaritalStatus(v string) {
	o.MaritalStatus = &v
}

// GetBirthDate returns the BirthDate field value if set, zero value otherwise.
func (o *Individual) GetBirthDate() time.Time {
	if o == nil || IsNil(o.BirthDate) {
		var ret time.Time
		return ret
	}
	return *o.BirthDate
}

// GetBirthDateOk returns a tuple with the BirthDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetBirthDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BirthDate) {
		return nil, false
	}
	return o.BirthDate, true
}

// HasBirthDate returns a boolean if a field has been set.
func (o *Individual) HasBirthDate() bool {
	if o != nil && !IsNil(o.BirthDate) {
		return true
	}

	return false
}

// SetBirthDate gets a reference to the given time.Time and assigns it to the BirthDate field.
func (o *Individual) SetBirthDate(v time.Time) {
	o.BirthDate = &v
}

// GetDeathDate returns the DeathDate field value if set, zero value otherwise.
func (o *Individual) GetDeathDate() time.Time {
	if o == nil || IsNil(o.DeathDate) {
		var ret time.Time
		return ret
	}
	return *o.DeathDate
}

// GetDeathDateOk returns a tuple with the DeathDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetDeathDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeathDate) {
		return nil, false
	}
	return o.DeathDate, true
}

// HasDeathDate returns a boolean if a field has been set.
func (o *Individual) HasDeathDate() bool {
	if o != nil && !IsNil(o.DeathDate) {
		return true
	}

	return false
}

// SetDeathDate gets a reference to the given time.Time and assigns it to the DeathDate field.
func (o *Individual) SetDeathDate(v time.Time) {
	o.DeathDate = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Individual) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Individual) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Individual) SetTitle(v string) {
	o.Title = &v
}

// GetAristocraticTitle returns the AristocraticTitle field value if set, zero value otherwise.
func (o *Individual) GetAristocraticTitle() string {
	if o == nil || IsNil(o.AristocraticTitle) {
		var ret string
		return ret
	}
	return *o.AristocraticTitle
}

// GetAristocraticTitleOk returns a tuple with the AristocraticTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetAristocraticTitleOk() (*string, bool) {
	if o == nil || IsNil(o.AristocraticTitle) {
		return nil, false
	}
	return o.AristocraticTitle, true
}

// HasAristocraticTitle returns a boolean if a field has been set.
func (o *Individual) HasAristocraticTitle() bool {
	if o != nil && !IsNil(o.AristocraticTitle) {
		return true
	}

	return false
}

// SetAristocraticTitle gets a reference to the given string and assigns it to the AristocraticTitle field.
func (o *Individual) SetAristocraticTitle(v string) {
	o.AristocraticTitle = &v
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *Individual) GetGeneration() string {
	if o == nil || IsNil(o.Generation) {
		var ret string
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetGenerationOk() (*string, bool) {
	if o == nil || IsNil(o.Generation) {
		return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *Individual) HasGeneration() bool {
	if o != nil && !IsNil(o.Generation) {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given string and assigns it to the Generation field.
func (o *Individual) SetGeneration(v string) {
	o.Generation = &v
}

// GetPreferredGivenName returns the PreferredGivenName field value if set, zero value otherwise.
func (o *Individual) GetPreferredGivenName() string {
	if o == nil || IsNil(o.PreferredGivenName) {
		var ret string
		return ret
	}
	return *o.PreferredGivenName
}

// GetPreferredGivenNameOk returns a tuple with the PreferredGivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetPreferredGivenNameOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredGivenName) {
		return nil, false
	}
	return o.PreferredGivenName, true
}

// HasPreferredGivenName returns a boolean if a field has been set.
func (o *Individual) HasPreferredGivenName() bool {
	if o != nil && !IsNil(o.PreferredGivenName) {
		return true
	}

	return false
}

// SetPreferredGivenName gets a reference to the given string and assigns it to the PreferredGivenName field.
func (o *Individual) SetPreferredGivenName(v string) {
	o.PreferredGivenName = &v
}

// GetFamilyNamePrefix returns the FamilyNamePrefix field value if set, zero value otherwise.
func (o *Individual) GetFamilyNamePrefix() string {
	if o == nil || IsNil(o.FamilyNamePrefix) {
		var ret string
		return ret
	}
	return *o.FamilyNamePrefix
}

// GetFamilyNamePrefixOk returns a tuple with the FamilyNamePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetFamilyNamePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.FamilyNamePrefix) {
		return nil, false
	}
	return o.FamilyNamePrefix, true
}

// HasFamilyNamePrefix returns a boolean if a field has been set.
func (o *Individual) HasFamilyNamePrefix() bool {
	if o != nil && !IsNil(o.FamilyNamePrefix) {
		return true
	}

	return false
}

// SetFamilyNamePrefix gets a reference to the given string and assigns it to the FamilyNamePrefix field.
func (o *Individual) SetFamilyNamePrefix(v string) {
	o.FamilyNamePrefix = &v
}

// GetLegalName returns the LegalName field value if set, zero value otherwise.
func (o *Individual) GetLegalName() string {
	if o == nil || IsNil(o.LegalName) {
		var ret string
		return ret
	}
	return *o.LegalName
}

// GetLegalNameOk returns a tuple with the LegalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetLegalNameOk() (*string, bool) {
	if o == nil || IsNil(o.LegalName) {
		return nil, false
	}
	return o.LegalName, true
}

// HasLegalName returns a boolean if a field has been set.
func (o *Individual) HasLegalName() bool {
	if o != nil && !IsNil(o.LegalName) {
		return true
	}

	return false
}

// SetLegalName gets a reference to the given string and assigns it to the LegalName field.
func (o *Individual) SetLegalName(v string) {
	o.LegalName = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *Individual) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName) {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetMiddleNameOk() (*string, bool) {
	if o == nil || IsNil(o.MiddleName) {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *Individual) HasMiddleName() bool {
	if o != nil && !IsNil(o.MiddleName) {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *Individual) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Individual) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Individual) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Individual) SetName(v string) {
	o.Name = &v
}

// GetFormattedName returns the FormattedName field value if set, zero value otherwise.
func (o *Individual) GetFormattedName() string {
	if o == nil || IsNil(o.FormattedName) {
		var ret string
		return ret
	}
	return *o.FormattedName
}

// GetFormattedNameOk returns a tuple with the FormattedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetFormattedNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormattedName) {
		return nil, false
	}
	return o.FormattedName, true
}

// HasFormattedName returns a boolean if a field has been set.
func (o *Individual) HasFormattedName() bool {
	if o != nil && !IsNil(o.FormattedName) {
		return true
	}

	return false
}

// SetFormattedName gets a reference to the given string and assigns it to the FormattedName field.
func (o *Individual) SetFormattedName(v string) {
	o.FormattedName = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Individual) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Individual) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Individual) SetLocation(v string) {
	o.Location = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Individual) GetStatus() IndividualStateType {
	if o == nil || IsNil(o.Status) {
		var ret IndividualStateType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetStatusOk() (*IndividualStateType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Individual) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given IndividualStateType and assigns it to the Status field.
func (o *Individual) SetStatus(v IndividualStateType) {
	o.Status = &v
}

// GetOtherName returns the OtherName field value if set, zero value otherwise.
func (o *Individual) GetOtherName() []OtherNameIndividual {
	if o == nil || IsNil(o.OtherName) {
		var ret []OtherNameIndividual
		return ret
	}
	return o.OtherName
}

// GetOtherNameOk returns a tuple with the OtherName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetOtherNameOk() ([]OtherNameIndividual, bool) {
	if o == nil || IsNil(o.OtherName) {
		return nil, false
	}
	return o.OtherName, true
}

// HasOtherName returns a boolean if a field has been set.
func (o *Individual) HasOtherName() bool {
	if o != nil && !IsNil(o.OtherName) {
		return true
	}

	return false
}

// SetOtherName gets a reference to the given []OtherNameIndividual and assigns it to the OtherName field.
func (o *Individual) SetOtherName(v []OtherNameIndividual) {
	o.OtherName = v
}

// GetIndividualIdentification returns the IndividualIdentification field value if set, zero value otherwise.
func (o *Individual) GetIndividualIdentification() []IndividualIdentification {
	if o == nil || IsNil(o.IndividualIdentification) {
		var ret []IndividualIdentification
		return ret
	}
	return o.IndividualIdentification
}

// GetIndividualIdentificationOk returns a tuple with the IndividualIdentification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetIndividualIdentificationOk() ([]IndividualIdentification, bool) {
	if o == nil || IsNil(o.IndividualIdentification) {
		return nil, false
	}
	return o.IndividualIdentification, true
}

// HasIndividualIdentification returns a boolean if a field has been set.
func (o *Individual) HasIndividualIdentification() bool {
	if o != nil && !IsNil(o.IndividualIdentification) {
		return true
	}

	return false
}

// SetIndividualIdentification gets a reference to the given []IndividualIdentification and assigns it to the IndividualIdentification field.
func (o *Individual) SetIndividualIdentification(v []IndividualIdentification) {
	o.IndividualIdentification = v
}

// GetDisability returns the Disability field value if set, zero value otherwise.
func (o *Individual) GetDisability() []Disability {
	if o == nil || IsNil(o.Disability) {
		var ret []Disability
		return ret
	}
	return o.Disability
}

// GetDisabilityOk returns a tuple with the Disability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetDisabilityOk() ([]Disability, bool) {
	if o == nil || IsNil(o.Disability) {
		return nil, false
	}
	return o.Disability, true
}

// HasDisability returns a boolean if a field has been set.
func (o *Individual) HasDisability() bool {
	if o != nil && !IsNil(o.Disability) {
		return true
	}

	return false
}

// SetDisability gets a reference to the given []Disability and assigns it to the Disability field.
func (o *Individual) SetDisability(v []Disability) {
	o.Disability = v
}

// GetLanguageAbility returns the LanguageAbility field value if set, zero value otherwise.
func (o *Individual) GetLanguageAbility() []LanguageAbility {
	if o == nil || IsNil(o.LanguageAbility) {
		var ret []LanguageAbility
		return ret
	}
	return o.LanguageAbility
}

// GetLanguageAbilityOk returns a tuple with the LanguageAbility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetLanguageAbilityOk() ([]LanguageAbility, bool) {
	if o == nil || IsNil(o.LanguageAbility) {
		return nil, false
	}
	return o.LanguageAbility, true
}

// HasLanguageAbility returns a boolean if a field has been set.
func (o *Individual) HasLanguageAbility() bool {
	if o != nil && !IsNil(o.LanguageAbility) {
		return true
	}

	return false
}

// SetLanguageAbility gets a reference to the given []LanguageAbility and assigns it to the LanguageAbility field.
func (o *Individual) SetLanguageAbility(v []LanguageAbility) {
	o.LanguageAbility = v
}

// GetSkill returns the Skill field value if set, zero value otherwise.
func (o *Individual) GetSkill() []Skill {
	if o == nil || IsNil(o.Skill) {
		var ret []Skill
		return ret
	}
	return o.Skill
}

// GetSkillOk returns a tuple with the Skill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetSkillOk() ([]Skill, bool) {
	if o == nil || IsNil(o.Skill) {
		return nil, false
	}
	return o.Skill, true
}

// HasSkill returns a boolean if a field has been set.
func (o *Individual) HasSkill() bool {
	if o != nil && !IsNil(o.Skill) {
		return true
	}

	return false
}

// SetSkill gets a reference to the given []Skill and assigns it to the Skill field.
func (o *Individual) SetSkill(v []Skill) {
	o.Skill = v
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise.
func (o *Individual) GetFamilyName() string {
	if o == nil || IsNil(o.FamilyName) {
		var ret string
		return ret
	}
	return *o.FamilyName
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetFamilyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FamilyName) {
		return nil, false
	}
	return o.FamilyName, true
}

// HasFamilyName returns a boolean if a field has been set.
func (o *Individual) HasFamilyName() bool {
	if o != nil && !IsNil(o.FamilyName) {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given string and assigns it to the FamilyName field.
func (o *Individual) SetFamilyName(v string) {
	o.FamilyName = &v
}

// GetGivenName returns the GivenName field value if set, zero value otherwise.
func (o *Individual) GetGivenName() string {
	if o == nil || IsNil(o.GivenName) {
		var ret string
		return ret
	}
	return *o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Individual) GetGivenNameOk() (*string, bool) {
	if o == nil || IsNil(o.GivenName) {
		return nil, false
	}
	return o.GivenName, true
}

// HasGivenName returns a boolean if a field has been set.
func (o *Individual) HasGivenName() bool {
	if o != nil && !IsNil(o.GivenName) {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given string and assigns it to the GivenName field.
func (o *Individual) SetGivenName(v string) {
	o.GivenName = &v
}

func (o Individual) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Individual) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedParty, errParty := json.Marshal(o.Party)
	if errParty != nil {
		return map[string]interface{}{}, errParty
	}
	errParty = json.Unmarshal([]byte(serializedParty), &toSerialize)
	if errParty != nil {
		return map[string]interface{}{}, errParty
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.PlaceOfBirth) {
		toSerialize["placeOfBirth"] = o.PlaceOfBirth
	}
	if !IsNil(o.CountryOfBirth) {
		toSerialize["countryOfBirth"] = o.CountryOfBirth
	}
	if !IsNil(o.Nationality) {
		toSerialize["nationality"] = o.Nationality
	}
	if !IsNil(o.MaritalStatus) {
		toSerialize["maritalStatus"] = o.MaritalStatus
	}
	if !IsNil(o.BirthDate) {
		toSerialize["birthDate"] = o.BirthDate
	}
	if !IsNil(o.DeathDate) {
		toSerialize["deathDate"] = o.DeathDate
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.AristocraticTitle) {
		toSerialize["aristocraticTitle"] = o.AristocraticTitle
	}
	if !IsNil(o.Generation) {
		toSerialize["generation"] = o.Generation
	}
	if !IsNil(o.PreferredGivenName) {
		toSerialize["preferredGivenName"] = o.PreferredGivenName
	}
	if !IsNil(o.FamilyNamePrefix) {
		toSerialize["familyNamePrefix"] = o.FamilyNamePrefix
	}
	if !IsNil(o.LegalName) {
		toSerialize["legalName"] = o.LegalName
	}
	if !IsNil(o.MiddleName) {
		toSerialize["middleName"] = o.MiddleName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FormattedName) {
		toSerialize["formattedName"] = o.FormattedName
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.OtherName) {
		toSerialize["otherName"] = o.OtherName
	}
	if !IsNil(o.IndividualIdentification) {
		toSerialize["individualIdentification"] = o.IndividualIdentification
	}
	if !IsNil(o.Disability) {
		toSerialize["disability"] = o.Disability
	}
	if !IsNil(o.LanguageAbility) {
		toSerialize["languageAbility"] = o.LanguageAbility
	}
	if !IsNil(o.Skill) {
		toSerialize["skill"] = o.Skill
	}
	if !IsNil(o.FamilyName) {
		toSerialize["familyName"] = o.FamilyName
	}
	if !IsNil(o.GivenName) {
		toSerialize["givenName"] = o.GivenName
	}
	return toSerialize, nil
}

func (o *Individual) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIndividual := _Individual{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIndividual)

	if err != nil {
		return err
	}

	*o = Individual(varIndividual)

	return err
}

type NullableIndividual struct {
	value *Individual
	isSet bool
}

func (v NullableIndividual) Get() *Individual {
	return v.value
}

func (v *NullableIndividual) Set(val *Individual) {
	v.value = val
	v.isSet = true
}

func (v NullableIndividual) IsSet() bool {
	return v.isSet
}

func (v *NullableIndividual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndividual(val *Individual) *NullableIndividual {
	return &NullableIndividual{value: val, isSet: true}
}

func (v NullableIndividual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndividual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


