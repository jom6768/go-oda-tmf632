/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GeographicAddressContactMedium type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeographicAddressContactMedium{}

// GeographicAddressContactMedium struct for GeographicAddressContactMedium
type GeographicAddressContactMedium struct {
	ContactMedium
	// The city
	City *string `json:"city,omitempty"`
	// The country
	Country *string `json:"country,omitempty"`
	// Postcode
	PostCode *string `json:"postCode,omitempty"`
	// State or province
	StateOrProvince *string `json:"stateOrProvince,omitempty"`
	// Describes the street
	Street1 *string `json:"street1,omitempty"`
	// Complementary street description
	Street2 *string `json:"street2,omitempty"`
	GeographicAddress *GeographicAddressRef `json:"geographicAddress,omitempty"`
}

type _GeographicAddressContactMedium GeographicAddressContactMedium

// NewGeographicAddressContactMedium instantiates a new GeographicAddressContactMedium object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeographicAddressContactMedium(type_ string) *GeographicAddressContactMedium {
	this := GeographicAddressContactMedium{}
	this.Type = type_
	return &this
}

// NewGeographicAddressContactMediumWithDefaults instantiates a new GeographicAddressContactMedium object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeographicAddressContactMediumWithDefaults() *GeographicAddressContactMedium {
	this := GeographicAddressContactMedium{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *GeographicAddressContactMedium) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressContactMedium) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *GeographicAddressContactMedium) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *GeographicAddressContactMedium) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *GeographicAddressContactMedium) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressContactMedium) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *GeographicAddressContactMedium) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *GeographicAddressContactMedium) SetCountry(v string) {
	o.Country = &v
}

// GetPostCode returns the PostCode field value if set, zero value otherwise.
func (o *GeographicAddressContactMedium) GetPostCode() string {
	if o == nil || IsNil(o.PostCode) {
		var ret string
		return ret
	}
	return *o.PostCode
}

// GetPostCodeOk returns a tuple with the PostCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressContactMedium) GetPostCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostCode) {
		return nil, false
	}
	return o.PostCode, true
}

// HasPostCode returns a boolean if a field has been set.
func (o *GeographicAddressContactMedium) HasPostCode() bool {
	if o != nil && !IsNil(o.PostCode) {
		return true
	}

	return false
}

// SetPostCode gets a reference to the given string and assigns it to the PostCode field.
func (o *GeographicAddressContactMedium) SetPostCode(v string) {
	o.PostCode = &v
}

// GetStateOrProvince returns the StateOrProvince field value if set, zero value otherwise.
func (o *GeographicAddressContactMedium) GetStateOrProvince() string {
	if o == nil || IsNil(o.StateOrProvince) {
		var ret string
		return ret
	}
	return *o.StateOrProvince
}

// GetStateOrProvinceOk returns a tuple with the StateOrProvince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressContactMedium) GetStateOrProvinceOk() (*string, bool) {
	if o == nil || IsNil(o.StateOrProvince) {
		return nil, false
	}
	return o.StateOrProvince, true
}

// HasStateOrProvince returns a boolean if a field has been set.
func (o *GeographicAddressContactMedium) HasStateOrProvince() bool {
	if o != nil && !IsNil(o.StateOrProvince) {
		return true
	}

	return false
}

// SetStateOrProvince gets a reference to the given string and assigns it to the StateOrProvince field.
func (o *GeographicAddressContactMedium) SetStateOrProvince(v string) {
	o.StateOrProvince = &v
}

// GetStreet1 returns the Street1 field value if set, zero value otherwise.
func (o *GeographicAddressContactMedium) GetStreet1() string {
	if o == nil || IsNil(o.Street1) {
		var ret string
		return ret
	}
	return *o.Street1
}

// GetStreet1Ok returns a tuple with the Street1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressContactMedium) GetStreet1Ok() (*string, bool) {
	if o == nil || IsNil(o.Street1) {
		return nil, false
	}
	return o.Street1, true
}

// HasStreet1 returns a boolean if a field has been set.
func (o *GeographicAddressContactMedium) HasStreet1() bool {
	if o != nil && !IsNil(o.Street1) {
		return true
	}

	return false
}

// SetStreet1 gets a reference to the given string and assigns it to the Street1 field.
func (o *GeographicAddressContactMedium) SetStreet1(v string) {
	o.Street1 = &v
}

// GetStreet2 returns the Street2 field value if set, zero value otherwise.
func (o *GeographicAddressContactMedium) GetStreet2() string {
	if o == nil || IsNil(o.Street2) {
		var ret string
		return ret
	}
	return *o.Street2
}

// GetStreet2Ok returns a tuple with the Street2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressContactMedium) GetStreet2Ok() (*string, bool) {
	if o == nil || IsNil(o.Street2) {
		return nil, false
	}
	return o.Street2, true
}

// HasStreet2 returns a boolean if a field has been set.
func (o *GeographicAddressContactMedium) HasStreet2() bool {
	if o != nil && !IsNil(o.Street2) {
		return true
	}

	return false
}

// SetStreet2 gets a reference to the given string and assigns it to the Street2 field.
func (o *GeographicAddressContactMedium) SetStreet2(v string) {
	o.Street2 = &v
}

// GetGeographicAddress returns the GeographicAddress field value if set, zero value otherwise.
func (o *GeographicAddressContactMedium) GetGeographicAddress() GeographicAddressRef {
	if o == nil || IsNil(o.GeographicAddress) {
		var ret GeographicAddressRef
		return ret
	}
	return *o.GeographicAddress
}

// GetGeographicAddressOk returns a tuple with the GeographicAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeographicAddressContactMedium) GetGeographicAddressOk() (*GeographicAddressRef, bool) {
	if o == nil || IsNil(o.GeographicAddress) {
		return nil, false
	}
	return o.GeographicAddress, true
}

// HasGeographicAddress returns a boolean if a field has been set.
func (o *GeographicAddressContactMedium) HasGeographicAddress() bool {
	if o != nil && !IsNil(o.GeographicAddress) {
		return true
	}

	return false
}

// SetGeographicAddress gets a reference to the given GeographicAddressRef and assigns it to the GeographicAddress field.
func (o *GeographicAddressContactMedium) SetGeographicAddress(v GeographicAddressRef) {
	o.GeographicAddress = &v
}

func (o GeographicAddressContactMedium) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeographicAddressContactMedium) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedContactMedium, errContactMedium := json.Marshal(o.ContactMedium)
	if errContactMedium != nil {
		return map[string]interface{}{}, errContactMedium
	}
	errContactMedium = json.Unmarshal([]byte(serializedContactMedium), &toSerialize)
	if errContactMedium != nil {
		return map[string]interface{}{}, errContactMedium
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.PostCode) {
		toSerialize["postCode"] = o.PostCode
	}
	if !IsNil(o.StateOrProvince) {
		toSerialize["stateOrProvince"] = o.StateOrProvince
	}
	if !IsNil(o.Street1) {
		toSerialize["street1"] = o.Street1
	}
	if !IsNil(o.Street2) {
		toSerialize["street2"] = o.Street2
	}
	if !IsNil(o.GeographicAddress) {
		toSerialize["geographicAddress"] = o.GeographicAddress
	}
	return toSerialize, nil
}

func (o *GeographicAddressContactMedium) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeographicAddressContactMedium := _GeographicAddressContactMedium{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeographicAddressContactMedium)

	if err != nil {
		return err
	}

	*o = GeographicAddressContactMedium(varGeographicAddressContactMedium)

	return err
}

type NullableGeographicAddressContactMedium struct {
	value *GeographicAddressContactMedium
	isSet bool
}

func (v NullableGeographicAddressContactMedium) Get() *GeographicAddressContactMedium {
	return v.value
}

func (v *NullableGeographicAddressContactMedium) Set(val *GeographicAddressContactMedium) {
	v.value = val
	v.isSet = true
}

func (v NullableGeographicAddressContactMedium) IsSet() bool {
	return v.isSet
}

func (v *NullableGeographicAddressContactMedium) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeographicAddressContactMedium(val *GeographicAddressContactMedium) *NullableGeographicAddressContactMedium {
	return &NullableGeographicAddressContactMedium{value: val, isSet: true}
}

func (v NullableGeographicAddressContactMedium) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeographicAddressContactMedium) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


