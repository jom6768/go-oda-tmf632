/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RelatedPartyOrPartyRoleFVO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelatedPartyOrPartyRoleFVO{}

// RelatedPartyOrPartyRoleFVO struct for RelatedPartyOrPartyRoleFVO
type RelatedPartyOrPartyRoleFVO struct {
	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'
	Role string `json:"role"`
	PartyOrPartyRole *PartyOrPartyRoleFVO `json:"partyOrPartyRole,omitempty"`
}

type _RelatedPartyOrPartyRoleFVO RelatedPartyOrPartyRoleFVO

// NewRelatedPartyOrPartyRoleFVO instantiates a new RelatedPartyOrPartyRoleFVO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedPartyOrPartyRoleFVO(type_ string, role string) *RelatedPartyOrPartyRoleFVO {
	this := RelatedPartyOrPartyRoleFVO{}
	this.Type = type_
	this.Role = role
	return &this
}

// NewRelatedPartyOrPartyRoleFVOWithDefaults instantiates a new RelatedPartyOrPartyRoleFVO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedPartyOrPartyRoleFVOWithDefaults() *RelatedPartyOrPartyRoleFVO {
	this := RelatedPartyOrPartyRoleFVO{}
	return &this
}

// GetType returns the Type field value
func (o *RelatedPartyOrPartyRoleFVO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RelatedPartyOrPartyRoleFVO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RelatedPartyOrPartyRoleFVO) SetType(v string) {
	o.Type = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *RelatedPartyOrPartyRoleFVO) GetBaseType() string {
	if o == nil || IsNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPartyOrPartyRoleFVO) GetBaseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *RelatedPartyOrPartyRoleFVO) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *RelatedPartyOrPartyRoleFVO) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *RelatedPartyOrPartyRoleFVO) GetSchemaLocation() string {
	if o == nil || IsNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPartyOrPartyRoleFVO) GetSchemaLocationOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaLocation) {
		return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *RelatedPartyOrPartyRoleFVO) HasSchemaLocation() bool {
	if o != nil && !IsNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *RelatedPartyOrPartyRoleFVO) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetRole returns the Role field value
func (o *RelatedPartyOrPartyRoleFVO) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *RelatedPartyOrPartyRoleFVO) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *RelatedPartyOrPartyRoleFVO) SetRole(v string) {
	o.Role = v
}

// GetPartyOrPartyRole returns the PartyOrPartyRole field value if set, zero value otherwise.
func (o *RelatedPartyOrPartyRoleFVO) GetPartyOrPartyRole() PartyOrPartyRoleFVO {
	if o == nil || IsNil(o.PartyOrPartyRole) {
		var ret PartyOrPartyRoleFVO
		return ret
	}
	return *o.PartyOrPartyRole
}

// GetPartyOrPartyRoleOk returns a tuple with the PartyOrPartyRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedPartyOrPartyRoleFVO) GetPartyOrPartyRoleOk() (*PartyOrPartyRoleFVO, bool) {
	if o == nil || IsNil(o.PartyOrPartyRole) {
		return nil, false
	}
	return o.PartyOrPartyRole, true
}

// HasPartyOrPartyRole returns a boolean if a field has been set.
func (o *RelatedPartyOrPartyRoleFVO) HasPartyOrPartyRole() bool {
	if o != nil && !IsNil(o.PartyOrPartyRole) {
		return true
	}

	return false
}

// SetPartyOrPartyRole gets a reference to the given PartyOrPartyRoleFVO and assigns it to the PartyOrPartyRole field.
func (o *RelatedPartyOrPartyRoleFVO) SetPartyOrPartyRole(v PartyOrPartyRoleFVO) {
	o.PartyOrPartyRole = &v
}

func (o RelatedPartyOrPartyRoleFVO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelatedPartyOrPartyRoleFVO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@type"] = o.Type
	if !IsNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !IsNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	toSerialize["role"] = o.Role
	if !IsNil(o.PartyOrPartyRole) {
		toSerialize["partyOrPartyRole"] = o.PartyOrPartyRole
	}
	return toSerialize, nil
}

func (o *RelatedPartyOrPartyRoleFVO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRelatedPartyOrPartyRoleFVO := _RelatedPartyOrPartyRoleFVO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRelatedPartyOrPartyRoleFVO)

	if err != nil {
		return err
	}

	*o = RelatedPartyOrPartyRoleFVO(varRelatedPartyOrPartyRoleFVO)

	return err
}

type NullableRelatedPartyOrPartyRoleFVO struct {
	value *RelatedPartyOrPartyRoleFVO
	isSet bool
}

func (v NullableRelatedPartyOrPartyRoleFVO) Get() *RelatedPartyOrPartyRoleFVO {
	return v.value
}

func (v *NullableRelatedPartyOrPartyRoleFVO) Set(val *RelatedPartyOrPartyRoleFVO) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedPartyOrPartyRoleFVO) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedPartyOrPartyRoleFVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedPartyOrPartyRoleFVO(val *RelatedPartyOrPartyRoleFVO) *NullableRelatedPartyOrPartyRoleFVO {
	return &NullableRelatedPartyOrPartyRoleFVO{value: val, isSet: true}
}

func (v NullableRelatedPartyOrPartyRoleFVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedPartyOrPartyRoleFVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


