/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PartyOrPartyRoleFVO - 
type PartyOrPartyRoleFVO struct {
	BusinessPartnerFVO *BusinessPartnerFVO
	ConsumerFVO *ConsumerFVO
	IndividualFVO *IndividualFVO
	OrganizationFVO *OrganizationFVO
	PartyRefFVO *PartyRefFVO
	PartyRoleFVO *PartyRoleFVO
	PartyRoleRefFVO *PartyRoleRefFVO
	ProducerFVO *ProducerFVO
	SupplierFVO *SupplierFVO
}

// BusinessPartnerFVOAsPartyOrPartyRoleFVO is a convenience function that returns BusinessPartnerFVO wrapped in PartyOrPartyRoleFVO
func BusinessPartnerFVOAsPartyOrPartyRoleFVO(v *BusinessPartnerFVO) PartyOrPartyRoleFVO {
	return PartyOrPartyRoleFVO{
		BusinessPartnerFVO: v,
	}
}

// ConsumerFVOAsPartyOrPartyRoleFVO is a convenience function that returns ConsumerFVO wrapped in PartyOrPartyRoleFVO
func ConsumerFVOAsPartyOrPartyRoleFVO(v *ConsumerFVO) PartyOrPartyRoleFVO {
	return PartyOrPartyRoleFVO{
		ConsumerFVO: v,
	}
}

// IndividualFVOAsPartyOrPartyRoleFVO is a convenience function that returns IndividualFVO wrapped in PartyOrPartyRoleFVO
func IndividualFVOAsPartyOrPartyRoleFVO(v *IndividualFVO) PartyOrPartyRoleFVO {
	return PartyOrPartyRoleFVO{
		IndividualFVO: v,
	}
}

// OrganizationFVOAsPartyOrPartyRoleFVO is a convenience function that returns OrganizationFVO wrapped in PartyOrPartyRoleFVO
func OrganizationFVOAsPartyOrPartyRoleFVO(v *OrganizationFVO) PartyOrPartyRoleFVO {
	return PartyOrPartyRoleFVO{
		OrganizationFVO: v,
	}
}

// PartyRefFVOAsPartyOrPartyRoleFVO is a convenience function that returns PartyRefFVO wrapped in PartyOrPartyRoleFVO
func PartyRefFVOAsPartyOrPartyRoleFVO(v *PartyRefFVO) PartyOrPartyRoleFVO {
	return PartyOrPartyRoleFVO{
		PartyRefFVO: v,
	}
}

// PartyRoleFVOAsPartyOrPartyRoleFVO is a convenience function that returns PartyRoleFVO wrapped in PartyOrPartyRoleFVO
func PartyRoleFVOAsPartyOrPartyRoleFVO(v *PartyRoleFVO) PartyOrPartyRoleFVO {
	return PartyOrPartyRoleFVO{
		PartyRoleFVO: v,
	}
}

// PartyRoleRefFVOAsPartyOrPartyRoleFVO is a convenience function that returns PartyRoleRefFVO wrapped in PartyOrPartyRoleFVO
func PartyRoleRefFVOAsPartyOrPartyRoleFVO(v *PartyRoleRefFVO) PartyOrPartyRoleFVO {
	return PartyOrPartyRoleFVO{
		PartyRoleRefFVO: v,
	}
}

// ProducerFVOAsPartyOrPartyRoleFVO is a convenience function that returns ProducerFVO wrapped in PartyOrPartyRoleFVO
func ProducerFVOAsPartyOrPartyRoleFVO(v *ProducerFVO) PartyOrPartyRoleFVO {
	return PartyOrPartyRoleFVO{
		ProducerFVO: v,
	}
}

// SupplierFVOAsPartyOrPartyRoleFVO is a convenience function that returns SupplierFVO wrapped in PartyOrPartyRoleFVO
func SupplierFVOAsPartyOrPartyRoleFVO(v *SupplierFVO) PartyOrPartyRoleFVO {
	return PartyOrPartyRoleFVO{
		SupplierFVO: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PartyOrPartyRoleFVO) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BusinessPartnerFVO
	err = newStrictDecoder(data).Decode(&dst.BusinessPartnerFVO)
	if err == nil {
		jsonBusinessPartnerFVO, _ := json.Marshal(dst.BusinessPartnerFVO)
		if string(jsonBusinessPartnerFVO) == "{}" { // empty struct
			dst.BusinessPartnerFVO = nil
		} else {
			if err = validator.Validate(dst.BusinessPartnerFVO); err != nil {
				dst.BusinessPartnerFVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.BusinessPartnerFVO = nil
	}

	// try to unmarshal data into ConsumerFVO
	err = newStrictDecoder(data).Decode(&dst.ConsumerFVO)
	if err == nil {
		jsonConsumerFVO, _ := json.Marshal(dst.ConsumerFVO)
		if string(jsonConsumerFVO) == "{}" { // empty struct
			dst.ConsumerFVO = nil
		} else {
			if err = validator.Validate(dst.ConsumerFVO); err != nil {
				dst.ConsumerFVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.ConsumerFVO = nil
	}

	// try to unmarshal data into IndividualFVO
	err = newStrictDecoder(data).Decode(&dst.IndividualFVO)
	if err == nil {
		jsonIndividualFVO, _ := json.Marshal(dst.IndividualFVO)
		if string(jsonIndividualFVO) == "{}" { // empty struct
			dst.IndividualFVO = nil
		} else {
			if err = validator.Validate(dst.IndividualFVO); err != nil {
				dst.IndividualFVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.IndividualFVO = nil
	}

	// try to unmarshal data into OrganizationFVO
	err = newStrictDecoder(data).Decode(&dst.OrganizationFVO)
	if err == nil {
		jsonOrganizationFVO, _ := json.Marshal(dst.OrganizationFVO)
		if string(jsonOrganizationFVO) == "{}" { // empty struct
			dst.OrganizationFVO = nil
		} else {
			if err = validator.Validate(dst.OrganizationFVO); err != nil {
				dst.OrganizationFVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.OrganizationFVO = nil
	}

	// try to unmarshal data into PartyRefFVO
	err = newStrictDecoder(data).Decode(&dst.PartyRefFVO)
	if err == nil {
		jsonPartyRefFVO, _ := json.Marshal(dst.PartyRefFVO)
		if string(jsonPartyRefFVO) == "{}" { // empty struct
			dst.PartyRefFVO = nil
		} else {
			if err = validator.Validate(dst.PartyRefFVO); err != nil {
				dst.PartyRefFVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.PartyRefFVO = nil
	}

	// try to unmarshal data into PartyRoleFVO
	err = newStrictDecoder(data).Decode(&dst.PartyRoleFVO)
	if err == nil {
		jsonPartyRoleFVO, _ := json.Marshal(dst.PartyRoleFVO)
		if string(jsonPartyRoleFVO) == "{}" { // empty struct
			dst.PartyRoleFVO = nil
		} else {
			if err = validator.Validate(dst.PartyRoleFVO); err != nil {
				dst.PartyRoleFVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.PartyRoleFVO = nil
	}

	// try to unmarshal data into PartyRoleRefFVO
	err = newStrictDecoder(data).Decode(&dst.PartyRoleRefFVO)
	if err == nil {
		jsonPartyRoleRefFVO, _ := json.Marshal(dst.PartyRoleRefFVO)
		if string(jsonPartyRoleRefFVO) == "{}" { // empty struct
			dst.PartyRoleRefFVO = nil
		} else {
			if err = validator.Validate(dst.PartyRoleRefFVO); err != nil {
				dst.PartyRoleRefFVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.PartyRoleRefFVO = nil
	}

	// try to unmarshal data into ProducerFVO
	err = newStrictDecoder(data).Decode(&dst.ProducerFVO)
	if err == nil {
		jsonProducerFVO, _ := json.Marshal(dst.ProducerFVO)
		if string(jsonProducerFVO) == "{}" { // empty struct
			dst.ProducerFVO = nil
		} else {
			if err = validator.Validate(dst.ProducerFVO); err != nil {
				dst.ProducerFVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProducerFVO = nil
	}

	// try to unmarshal data into SupplierFVO
	err = newStrictDecoder(data).Decode(&dst.SupplierFVO)
	if err == nil {
		jsonSupplierFVO, _ := json.Marshal(dst.SupplierFVO)
		if string(jsonSupplierFVO) == "{}" { // empty struct
			dst.SupplierFVO = nil
		} else {
			if err = validator.Validate(dst.SupplierFVO); err != nil {
				dst.SupplierFVO = nil
			} else {
				match++
			}
		}
	} else {
		dst.SupplierFVO = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BusinessPartnerFVO = nil
		dst.ConsumerFVO = nil
		dst.IndividualFVO = nil
		dst.OrganizationFVO = nil
		dst.PartyRefFVO = nil
		dst.PartyRoleFVO = nil
		dst.PartyRoleRefFVO = nil
		dst.ProducerFVO = nil
		dst.SupplierFVO = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PartyOrPartyRoleFVO)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PartyOrPartyRoleFVO)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PartyOrPartyRoleFVO) MarshalJSON() ([]byte, error) {
	if src.BusinessPartnerFVO != nil {
		return json.Marshal(&src.BusinessPartnerFVO)
	}

	if src.ConsumerFVO != nil {
		return json.Marshal(&src.ConsumerFVO)
	}

	if src.IndividualFVO != nil {
		return json.Marshal(&src.IndividualFVO)
	}

	if src.OrganizationFVO != nil {
		return json.Marshal(&src.OrganizationFVO)
	}

	if src.PartyRefFVO != nil {
		return json.Marshal(&src.PartyRefFVO)
	}

	if src.PartyRoleFVO != nil {
		return json.Marshal(&src.PartyRoleFVO)
	}

	if src.PartyRoleRefFVO != nil {
		return json.Marshal(&src.PartyRoleRefFVO)
	}

	if src.ProducerFVO != nil {
		return json.Marshal(&src.ProducerFVO)
	}

	if src.SupplierFVO != nil {
		return json.Marshal(&src.SupplierFVO)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PartyOrPartyRoleFVO) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BusinessPartnerFVO != nil {
		return obj.BusinessPartnerFVO
	}

	if obj.ConsumerFVO != nil {
		return obj.ConsumerFVO
	}

	if obj.IndividualFVO != nil {
		return obj.IndividualFVO
	}

	if obj.OrganizationFVO != nil {
		return obj.OrganizationFVO
	}

	if obj.PartyRefFVO != nil {
		return obj.PartyRefFVO
	}

	if obj.PartyRoleFVO != nil {
		return obj.PartyRoleFVO
	}

	if obj.PartyRoleRefFVO != nil {
		return obj.PartyRoleRefFVO
	}

	if obj.ProducerFVO != nil {
		return obj.ProducerFVO
	}

	if obj.SupplierFVO != nil {
		return obj.SupplierFVO
	}

	// all schemas are nil
	return nil
}

type NullablePartyOrPartyRoleFVO struct {
	value *PartyOrPartyRoleFVO
	isSet bool
}

func (v NullablePartyOrPartyRoleFVO) Get() *PartyOrPartyRoleFVO {
	return v.value
}

func (v *NullablePartyOrPartyRoleFVO) Set(val *PartyOrPartyRoleFVO) {
	v.value = val
	v.isSet = true
}

func (v NullablePartyOrPartyRoleFVO) IsSet() bool {
	return v.isSet
}

func (v *NullablePartyOrPartyRoleFVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartyOrPartyRoleFVO(val *PartyOrPartyRoleFVO) *NullablePartyOrPartyRoleFVO {
	return &NullablePartyOrPartyRoleFVO{value: val, isSet: true}
}

func (v NullablePartyOrPartyRoleFVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartyOrPartyRoleFVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


