/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IndividualStateType Valid values for the lifecycle state of the individual
type IndividualStateType string

// List of IndividualStateType
const (
	INITIALIZED IndividualStateType = "initialized"
	VALIDATED IndividualStateType = "validated"
	DECEASED IndividualStateType = "deceased"
)

// All allowed values of IndividualStateType enum
var AllowedIndividualStateTypeEnumValues = []IndividualStateType{
	"initialized",
	"validated",
	"deceased",
}

func (v *IndividualStateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndividualStateType(value)
	for _, existing := range AllowedIndividualStateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndividualStateType", value)
}

// NewIndividualStateTypeFromValue returns a pointer to a valid IndividualStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndividualStateTypeFromValue(v string) (*IndividualStateType, error) {
	ev := IndividualStateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndividualStateType: valid values are %v", v, AllowedIndividualStateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndividualStateType) IsValid() bool {
	for _, existing := range AllowedIndividualStateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndividualStateType value
func (v IndividualStateType) Ptr() *IndividualStateType {
	return &v
}

type NullableIndividualStateType struct {
	value *IndividualStateType
	isSet bool
}

func (v NullableIndividualStateType) Get() *IndividualStateType {
	return v.value
}

func (v *NullableIndividualStateType) Set(val *IndividualStateType) {
	v.value = val
	v.isSet = true
}

func (v NullableIndividualStateType) IsSet() bool {
	return v.isSet
}

func (v *NullableIndividualStateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndividualStateType(val *IndividualStateType) *NullableIndividualStateType {
	return &NullableIndividualStateType{value: val, isSet: true}
}

func (v NullableIndividualStateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndividualStateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

