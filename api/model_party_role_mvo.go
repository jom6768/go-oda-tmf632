/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PartyRoleMVO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartyRoleMVO{}

// PartyRoleMVO struct for PartyRoleMVO
type PartyRoleMVO struct {
	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity.
	Name string `json:"name"`
	// A description of the PartyRole.
	Description *string `json:"description,omitempty"`
	// Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification.
	Role *string `json:"role,omitempty"`
	EngagedParty PartyRefMVO `json:"engagedParty"`
	PartyRoleSpecification *PartyRoleSpecificationRefMVO `json:"partyRoleSpecification,omitempty"`
	// Describes the characteristic of a party role.
	Characteristic []CharacteristicMVO `json:"characteristic,omitempty"`
	Account []AccountRefMVO `json:"account,omitempty"`
	Agreement []AgreementRefMVO `json:"agreement,omitempty"`
	ContactMedium []ContactMediumMVO `json:"contactMedium,omitempty"`
	PaymentMethod []PaymentMethodRefMVO `json:"paymentMethod,omitempty"`
	CreditProfile []CreditProfileMVO `json:"creditProfile,omitempty"`
	RelatedParty []RelatedPartyOrPartyRoleMVO `json:"relatedParty,omitempty"`
	// Used to track the lifecycle status of the party role.
	Status *string `json:"status,omitempty"`
	// A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.
	StatusReason *string `json:"statusReason,omitempty"`
	ValidFor *TimePeriod `json:"validFor,omitempty"`
}

type _PartyRoleMVO PartyRoleMVO

// NewPartyRoleMVO instantiates a new PartyRoleMVO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartyRoleMVO(type_ string, name string, engagedParty PartyRefMVO) *PartyRoleMVO {
	this := PartyRoleMVO{}
	this.Type = type_
	this.Name = name
	this.EngagedParty = engagedParty
	return &this
}

// NewPartyRoleMVOWithDefaults instantiates a new PartyRoleMVO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartyRoleMVOWithDefaults() *PartyRoleMVO {
	this := PartyRoleMVO{}
	return &this
}

// GetType returns the Type field value
func (o *PartyRoleMVO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PartyRoleMVO) SetType(v string) {
	o.Type = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetBaseType() string {
	if o == nil || IsNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetBaseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *PartyRoleMVO) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetSchemaLocation() string {
	if o == nil || IsNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetSchemaLocationOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaLocation) {
		return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasSchemaLocation() bool {
	if o != nil && !IsNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *PartyRoleMVO) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetName returns the Name field value
func (o *PartyRoleMVO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PartyRoleMVO) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PartyRoleMVO) SetDescription(v string) {
	o.Description = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *PartyRoleMVO) SetRole(v string) {
	o.Role = &v
}

// GetEngagedParty returns the EngagedParty field value
func (o *PartyRoleMVO) GetEngagedParty() PartyRefMVO {
	if o == nil {
		var ret PartyRefMVO
		return ret
	}

	return o.EngagedParty
}

// GetEngagedPartyOk returns a tuple with the EngagedParty field value
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetEngagedPartyOk() (*PartyRefMVO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngagedParty, true
}

// SetEngagedParty sets field value
func (o *PartyRoleMVO) SetEngagedParty(v PartyRefMVO) {
	o.EngagedParty = v
}

// GetPartyRoleSpecification returns the PartyRoleSpecification field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetPartyRoleSpecification() PartyRoleSpecificationRefMVO {
	if o == nil || IsNil(o.PartyRoleSpecification) {
		var ret PartyRoleSpecificationRefMVO
		return ret
	}
	return *o.PartyRoleSpecification
}

// GetPartyRoleSpecificationOk returns a tuple with the PartyRoleSpecification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetPartyRoleSpecificationOk() (*PartyRoleSpecificationRefMVO, bool) {
	if o == nil || IsNil(o.PartyRoleSpecification) {
		return nil, false
	}
	return o.PartyRoleSpecification, true
}

// HasPartyRoleSpecification returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasPartyRoleSpecification() bool {
	if o != nil && !IsNil(o.PartyRoleSpecification) {
		return true
	}

	return false
}

// SetPartyRoleSpecification gets a reference to the given PartyRoleSpecificationRefMVO and assigns it to the PartyRoleSpecification field.
func (o *PartyRoleMVO) SetPartyRoleSpecification(v PartyRoleSpecificationRefMVO) {
	o.PartyRoleSpecification = &v
}

// GetCharacteristic returns the Characteristic field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetCharacteristic() []CharacteristicMVO {
	if o == nil || IsNil(o.Characteristic) {
		var ret []CharacteristicMVO
		return ret
	}
	return o.Characteristic
}

// GetCharacteristicOk returns a tuple with the Characteristic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetCharacteristicOk() ([]CharacteristicMVO, bool) {
	if o == nil || IsNil(o.Characteristic) {
		return nil, false
	}
	return o.Characteristic, true
}

// HasCharacteristic returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasCharacteristic() bool {
	if o != nil && !IsNil(o.Characteristic) {
		return true
	}

	return false
}

// SetCharacteristic gets a reference to the given []CharacteristicMVO and assigns it to the Characteristic field.
func (o *PartyRoleMVO) SetCharacteristic(v []CharacteristicMVO) {
	o.Characteristic = v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetAccount() []AccountRefMVO {
	if o == nil || IsNil(o.Account) {
		var ret []AccountRefMVO
		return ret
	}
	return o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetAccountOk() ([]AccountRefMVO, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given []AccountRefMVO and assigns it to the Account field.
func (o *PartyRoleMVO) SetAccount(v []AccountRefMVO) {
	o.Account = v
}

// GetAgreement returns the Agreement field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetAgreement() []AgreementRefMVO {
	if o == nil || IsNil(o.Agreement) {
		var ret []AgreementRefMVO
		return ret
	}
	return o.Agreement
}

// GetAgreementOk returns a tuple with the Agreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetAgreementOk() ([]AgreementRefMVO, bool) {
	if o == nil || IsNil(o.Agreement) {
		return nil, false
	}
	return o.Agreement, true
}

// HasAgreement returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasAgreement() bool {
	if o != nil && !IsNil(o.Agreement) {
		return true
	}

	return false
}

// SetAgreement gets a reference to the given []AgreementRefMVO and assigns it to the Agreement field.
func (o *PartyRoleMVO) SetAgreement(v []AgreementRefMVO) {
	o.Agreement = v
}

// GetContactMedium returns the ContactMedium field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetContactMedium() []ContactMediumMVO {
	if o == nil || IsNil(o.ContactMedium) {
		var ret []ContactMediumMVO
		return ret
	}
	return o.ContactMedium
}

// GetContactMediumOk returns a tuple with the ContactMedium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetContactMediumOk() ([]ContactMediumMVO, bool) {
	if o == nil || IsNil(o.ContactMedium) {
		return nil, false
	}
	return o.ContactMedium, true
}

// HasContactMedium returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasContactMedium() bool {
	if o != nil && !IsNil(o.ContactMedium) {
		return true
	}

	return false
}

// SetContactMedium gets a reference to the given []ContactMediumMVO and assigns it to the ContactMedium field.
func (o *PartyRoleMVO) SetContactMedium(v []ContactMediumMVO) {
	o.ContactMedium = v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetPaymentMethod() []PaymentMethodRefMVO {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret []PaymentMethodRefMVO
		return ret
	}
	return o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetPaymentMethodOk() ([]PaymentMethodRefMVO, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given []PaymentMethodRefMVO and assigns it to the PaymentMethod field.
func (o *PartyRoleMVO) SetPaymentMethod(v []PaymentMethodRefMVO) {
	o.PaymentMethod = v
}

// GetCreditProfile returns the CreditProfile field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetCreditProfile() []CreditProfileMVO {
	if o == nil || IsNil(o.CreditProfile) {
		var ret []CreditProfileMVO
		return ret
	}
	return o.CreditProfile
}

// GetCreditProfileOk returns a tuple with the CreditProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetCreditProfileOk() ([]CreditProfileMVO, bool) {
	if o == nil || IsNil(o.CreditProfile) {
		return nil, false
	}
	return o.CreditProfile, true
}

// HasCreditProfile returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasCreditProfile() bool {
	if o != nil && !IsNil(o.CreditProfile) {
		return true
	}

	return false
}

// SetCreditProfile gets a reference to the given []CreditProfileMVO and assigns it to the CreditProfile field.
func (o *PartyRoleMVO) SetCreditProfile(v []CreditProfileMVO) {
	o.CreditProfile = v
}

// GetRelatedParty returns the RelatedParty field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetRelatedParty() []RelatedPartyOrPartyRoleMVO {
	if o == nil || IsNil(o.RelatedParty) {
		var ret []RelatedPartyOrPartyRoleMVO
		return ret
	}
	return o.RelatedParty
}

// GetRelatedPartyOk returns a tuple with the RelatedParty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetRelatedPartyOk() ([]RelatedPartyOrPartyRoleMVO, bool) {
	if o == nil || IsNil(o.RelatedParty) {
		return nil, false
	}
	return o.RelatedParty, true
}

// HasRelatedParty returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasRelatedParty() bool {
	if o != nil && !IsNil(o.RelatedParty) {
		return true
	}

	return false
}

// SetRelatedParty gets a reference to the given []RelatedPartyOrPartyRoleMVO and assigns it to the RelatedParty field.
func (o *PartyRoleMVO) SetRelatedParty(v []RelatedPartyOrPartyRoleMVO) {
	o.RelatedParty = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PartyRoleMVO) SetStatus(v string) {
	o.Status = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetStatusReason() string {
	if o == nil || IsNil(o.StatusReason) {
		var ret string
		return ret
	}
	return *o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasStatusReason() bool {
	if o != nil && !IsNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given string and assigns it to the StatusReason field.
func (o *PartyRoleMVO) SetStatusReason(v string) {
	o.StatusReason = &v
}

// GetValidFor returns the ValidFor field value if set, zero value otherwise.
func (o *PartyRoleMVO) GetValidFor() TimePeriod {
	if o == nil || IsNil(o.ValidFor) {
		var ret TimePeriod
		return ret
	}
	return *o.ValidFor
}

// GetValidForOk returns a tuple with the ValidFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartyRoleMVO) GetValidForOk() (*TimePeriod, bool) {
	if o == nil || IsNil(o.ValidFor) {
		return nil, false
	}
	return o.ValidFor, true
}

// HasValidFor returns a boolean if a field has been set.
func (o *PartyRoleMVO) HasValidFor() bool {
	if o != nil && !IsNil(o.ValidFor) {
		return true
	}

	return false
}

// SetValidFor gets a reference to the given TimePeriod and assigns it to the ValidFor field.
func (o *PartyRoleMVO) SetValidFor(v TimePeriod) {
	o.ValidFor = &v
}

func (o PartyRoleMVO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartyRoleMVO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@type"] = o.Type
	if !IsNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !IsNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	toSerialize["engagedParty"] = o.EngagedParty
	if !IsNil(o.PartyRoleSpecification) {
		toSerialize["partyRoleSpecification"] = o.PartyRoleSpecification
	}
	if !IsNil(o.Characteristic) {
		toSerialize["characteristic"] = o.Characteristic
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Agreement) {
		toSerialize["agreement"] = o.Agreement
	}
	if !IsNil(o.ContactMedium) {
		toSerialize["contactMedium"] = o.ContactMedium
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["paymentMethod"] = o.PaymentMethod
	}
	if !IsNil(o.CreditProfile) {
		toSerialize["creditProfile"] = o.CreditProfile
	}
	if !IsNil(o.RelatedParty) {
		toSerialize["relatedParty"] = o.RelatedParty
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	if !IsNil(o.ValidFor) {
		toSerialize["validFor"] = o.ValidFor
	}
	return toSerialize, nil
}

func (o *PartyRoleMVO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
		"name",
		"engagedParty",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPartyRoleMVO := _PartyRoleMVO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPartyRoleMVO)

	if err != nil {
		return err
	}

	*o = PartyRoleMVO(varPartyRoleMVO)

	return err
}

type NullablePartyRoleMVO struct {
	value *PartyRoleMVO
	isSet bool
}

func (v NullablePartyRoleMVO) Get() *PartyRoleMVO {
	return v.value
}

func (v *NullablePartyRoleMVO) Set(val *PartyRoleMVO) {
	v.value = val
	v.isSet = true
}

func (v NullablePartyRoleMVO) IsSet() bool {
	return v.isSet
}

func (v *NullablePartyRoleMVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartyRoleMVO(val *PartyRoleMVO) *NullablePartyRoleMVO {
	return &NullablePartyRoleMVO{value: val, isSet: true}
}

func (v NullablePartyRoleMVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartyRoleMVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


