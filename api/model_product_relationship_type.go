/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProductRelationshipType Possible values for product relationship - This is informative information and implementation are free to use distinct.
type ProductRelationshipType string

// List of ProductRelationshipType
const (
	MIGRATES_TO ProductRelationshipType = "migratesTo"
	BUNDLES ProductRelationshipType = "bundles"
	BUNDLED_BY ProductRelationshipType = "bundledBy"
	RELIES_ON ProductRelationshipType = "reliesOn"
	ENABLES ProductRelationshipType = "enables"
	REQUIRES ProductRelationshipType = "requires"
	DEPENDS_ON ProductRelationshipType = "dependsOn"
	BRINGS ProductRelationshipType = "brings"
)

// All allowed values of ProductRelationshipType enum
var AllowedProductRelationshipTypeEnumValues = []ProductRelationshipType{
	"migratesTo",
	"bundles",
	"bundledBy",
	"reliesOn",
	"enables",
	"requires",
	"dependsOn",
	"brings",
}

func (v *ProductRelationshipType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductRelationshipType(value)
	for _, existing := range AllowedProductRelationshipTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductRelationshipType", value)
}

// NewProductRelationshipTypeFromValue returns a pointer to a valid ProductRelationshipType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductRelationshipTypeFromValue(v string) (*ProductRelationshipType, error) {
	ev := ProductRelationshipType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductRelationshipType: valid values are %v", v, AllowedProductRelationshipTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductRelationshipType) IsValid() bool {
	for _, existing := range AllowedProductRelationshipTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductRelationshipType value
func (v ProductRelationshipType) Ptr() *ProductRelationshipType {
	return &v
}

type NullableProductRelationshipType struct {
	value *ProductRelationshipType
	isSet bool
}

func (v NullableProductRelationshipType) Get() *ProductRelationshipType {
	return v.value
}

func (v *NullableProductRelationshipType) Set(val *ProductRelationshipType) {
	v.value = val
	v.isSet = true
}

func (v NullableProductRelationshipType) IsSet() bool {
	return v.isSet
}

func (v *NullableProductRelationshipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductRelationshipType(val *ProductRelationshipType) *NullableProductRelationshipType {
	return &NullableProductRelationshipType{value: val, isSet: true}
}

func (v NullableProductRelationshipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductRelationshipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

