/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaxExemptionCertificateFVO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxExemptionCertificateFVO{}

// TaxExemptionCertificateFVO struct for TaxExemptionCertificateFVO
type TaxExemptionCertificateFVO struct {
	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// Identifier of the tax exemption within list of the exemptions
	Id *string `json:"id,omitempty"`
	// A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%).
	TaxDefinition []TaxDefinitionFVO `json:"taxDefinition,omitempty"`
	ValidFor *TimePeriod `json:"validFor,omitempty"`
	// Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction
	CertificateNumber *string `json:"certificateNumber,omitempty"`
	// Name of the jurisdiction that issued the exemption
	IssuingJurisdiction *string `json:"issuingJurisdiction,omitempty"`
	// Reason for the tax exemption
	Reason *string `json:"reason,omitempty"`
	Attachment *AttachmentRefOrValueFVO `json:"attachment,omitempty"`
}

type _TaxExemptionCertificateFVO TaxExemptionCertificateFVO

// NewTaxExemptionCertificateFVO instantiates a new TaxExemptionCertificateFVO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxExemptionCertificateFVO(type_ string) *TaxExemptionCertificateFVO {
	this := TaxExemptionCertificateFVO{}
	this.Type = type_
	return &this
}

// NewTaxExemptionCertificateFVOWithDefaults instantiates a new TaxExemptionCertificateFVO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxExemptionCertificateFVOWithDefaults() *TaxExemptionCertificateFVO {
	this := TaxExemptionCertificateFVO{}
	return &this
}

// GetType returns the Type field value
func (o *TaxExemptionCertificateFVO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TaxExemptionCertificateFVO) SetType(v string) {
	o.Type = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *TaxExemptionCertificateFVO) GetBaseType() string {
	if o == nil || IsNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetBaseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *TaxExemptionCertificateFVO) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *TaxExemptionCertificateFVO) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *TaxExemptionCertificateFVO) GetSchemaLocation() string {
	if o == nil || IsNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetSchemaLocationOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaLocation) {
		return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *TaxExemptionCertificateFVO) HasSchemaLocation() bool {
	if o != nil && !IsNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *TaxExemptionCertificateFVO) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxExemptionCertificateFVO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxExemptionCertificateFVO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaxExemptionCertificateFVO) SetId(v string) {
	o.Id = &v
}

// GetTaxDefinition returns the TaxDefinition field value if set, zero value otherwise.
func (o *TaxExemptionCertificateFVO) GetTaxDefinition() []TaxDefinitionFVO {
	if o == nil || IsNil(o.TaxDefinition) {
		var ret []TaxDefinitionFVO
		return ret
	}
	return o.TaxDefinition
}

// GetTaxDefinitionOk returns a tuple with the TaxDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetTaxDefinitionOk() ([]TaxDefinitionFVO, bool) {
	if o == nil || IsNil(o.TaxDefinition) {
		return nil, false
	}
	return o.TaxDefinition, true
}

// HasTaxDefinition returns a boolean if a field has been set.
func (o *TaxExemptionCertificateFVO) HasTaxDefinition() bool {
	if o != nil && !IsNil(o.TaxDefinition) {
		return true
	}

	return false
}

// SetTaxDefinition gets a reference to the given []TaxDefinitionFVO and assigns it to the TaxDefinition field.
func (o *TaxExemptionCertificateFVO) SetTaxDefinition(v []TaxDefinitionFVO) {
	o.TaxDefinition = v
}

// GetValidFor returns the ValidFor field value if set, zero value otherwise.
func (o *TaxExemptionCertificateFVO) GetValidFor() TimePeriod {
	if o == nil || IsNil(o.ValidFor) {
		var ret TimePeriod
		return ret
	}
	return *o.ValidFor
}

// GetValidForOk returns a tuple with the ValidFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetValidForOk() (*TimePeriod, bool) {
	if o == nil || IsNil(o.ValidFor) {
		return nil, false
	}
	return o.ValidFor, true
}

// HasValidFor returns a boolean if a field has been set.
func (o *TaxExemptionCertificateFVO) HasValidFor() bool {
	if o != nil && !IsNil(o.ValidFor) {
		return true
	}

	return false
}

// SetValidFor gets a reference to the given TimePeriod and assigns it to the ValidFor field.
func (o *TaxExemptionCertificateFVO) SetValidFor(v TimePeriod) {
	o.ValidFor = &v
}

// GetCertificateNumber returns the CertificateNumber field value if set, zero value otherwise.
func (o *TaxExemptionCertificateFVO) GetCertificateNumber() string {
	if o == nil || IsNil(o.CertificateNumber) {
		var ret string
		return ret
	}
	return *o.CertificateNumber
}

// GetCertificateNumberOk returns a tuple with the CertificateNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetCertificateNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateNumber) {
		return nil, false
	}
	return o.CertificateNumber, true
}

// HasCertificateNumber returns a boolean if a field has been set.
func (o *TaxExemptionCertificateFVO) HasCertificateNumber() bool {
	if o != nil && !IsNil(o.CertificateNumber) {
		return true
	}

	return false
}

// SetCertificateNumber gets a reference to the given string and assigns it to the CertificateNumber field.
func (o *TaxExemptionCertificateFVO) SetCertificateNumber(v string) {
	o.CertificateNumber = &v
}

// GetIssuingJurisdiction returns the IssuingJurisdiction field value if set, zero value otherwise.
func (o *TaxExemptionCertificateFVO) GetIssuingJurisdiction() string {
	if o == nil || IsNil(o.IssuingJurisdiction) {
		var ret string
		return ret
	}
	return *o.IssuingJurisdiction
}

// GetIssuingJurisdictionOk returns a tuple with the IssuingJurisdiction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetIssuingJurisdictionOk() (*string, bool) {
	if o == nil || IsNil(o.IssuingJurisdiction) {
		return nil, false
	}
	return o.IssuingJurisdiction, true
}

// HasIssuingJurisdiction returns a boolean if a field has been set.
func (o *TaxExemptionCertificateFVO) HasIssuingJurisdiction() bool {
	if o != nil && !IsNil(o.IssuingJurisdiction) {
		return true
	}

	return false
}

// SetIssuingJurisdiction gets a reference to the given string and assigns it to the IssuingJurisdiction field.
func (o *TaxExemptionCertificateFVO) SetIssuingJurisdiction(v string) {
	o.IssuingJurisdiction = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *TaxExemptionCertificateFVO) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *TaxExemptionCertificateFVO) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *TaxExemptionCertificateFVO) SetReason(v string) {
	o.Reason = &v
}

// GetAttachment returns the Attachment field value if set, zero value otherwise.
func (o *TaxExemptionCertificateFVO) GetAttachment() AttachmentRefOrValueFVO {
	if o == nil || IsNil(o.Attachment) {
		var ret AttachmentRefOrValueFVO
		return ret
	}
	return *o.Attachment
}

// GetAttachmentOk returns a tuple with the Attachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxExemptionCertificateFVO) GetAttachmentOk() (*AttachmentRefOrValueFVO, bool) {
	if o == nil || IsNil(o.Attachment) {
		return nil, false
	}
	return o.Attachment, true
}

// HasAttachment returns a boolean if a field has been set.
func (o *TaxExemptionCertificateFVO) HasAttachment() bool {
	if o != nil && !IsNil(o.Attachment) {
		return true
	}

	return false
}

// SetAttachment gets a reference to the given AttachmentRefOrValueFVO and assigns it to the Attachment field.
func (o *TaxExemptionCertificateFVO) SetAttachment(v AttachmentRefOrValueFVO) {
	o.Attachment = &v
}

func (o TaxExemptionCertificateFVO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxExemptionCertificateFVO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@type"] = o.Type
	if !IsNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !IsNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TaxDefinition) {
		toSerialize["taxDefinition"] = o.TaxDefinition
	}
	if !IsNil(o.ValidFor) {
		toSerialize["validFor"] = o.ValidFor
	}
	if !IsNil(o.CertificateNumber) {
		toSerialize["certificateNumber"] = o.CertificateNumber
	}
	if !IsNil(o.IssuingJurisdiction) {
		toSerialize["issuingJurisdiction"] = o.IssuingJurisdiction
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Attachment) {
		toSerialize["attachment"] = o.Attachment
	}
	return toSerialize, nil
}

func (o *TaxExemptionCertificateFVO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxExemptionCertificateFVO := _TaxExemptionCertificateFVO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaxExemptionCertificateFVO)

	if err != nil {
		return err
	}

	*o = TaxExemptionCertificateFVO(varTaxExemptionCertificateFVO)

	return err
}

type NullableTaxExemptionCertificateFVO struct {
	value *TaxExemptionCertificateFVO
	isSet bool
}

func (v NullableTaxExemptionCertificateFVO) Get() *TaxExemptionCertificateFVO {
	return v.value
}

func (v *NullableTaxExemptionCertificateFVO) Set(val *TaxExemptionCertificateFVO) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxExemptionCertificateFVO) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxExemptionCertificateFVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxExemptionCertificateFVO(val *TaxExemptionCertificateFVO) *NullableTaxExemptionCertificateFVO {
	return &NullableTaxExemptionCertificateFVO{value: val, isSet: true}
}

func (v NullableTaxExemptionCertificateFVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxExemptionCertificateFVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


