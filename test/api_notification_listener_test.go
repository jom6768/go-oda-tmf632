/*
Party Management

Testing NotificationListenerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/jom6768/go-oda-tmf632/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_NotificationListenerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NotificationListenerAPIService IndividualAttributeValueChangeEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationListenerAPI.IndividualAttributeValueChangeEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationListenerAPIService IndividualCreateEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationListenerAPI.IndividualCreateEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationListenerAPIService IndividualDeleteEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationListenerAPI.IndividualDeleteEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationListenerAPIService IndividualStateChangeEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationListenerAPI.IndividualStateChangeEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationListenerAPIService OrganizationAttributeValueChangeEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationListenerAPI.OrganizationAttributeValueChangeEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationListenerAPIService OrganizationCreateEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationListenerAPI.OrganizationCreateEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationListenerAPIService OrganizationDeleteEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationListenerAPI.OrganizationDeleteEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationListenerAPIService OrganizationStateChangeEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.NotificationListenerAPI.OrganizationStateChangeEvent(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
