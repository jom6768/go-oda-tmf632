/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the OrganizationIdentificationFVO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationIdentificationFVO{}

// OrganizationIdentificationFVO struct for OrganizationIdentificationFVO
type OrganizationIdentificationFVO struct {
	// When sub-classing, this defines the sub-class Extensible name
	Type string `json:"@type"`
	// When sub-classing, this defines the super-class
	BaseType *string `json:"@baseType,omitempty"`
	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation *string `json:"@schemaLocation,omitempty"`
	// Identifier
	IdentificationId *string `json:"identificationId,omitempty"`
	// Authority which has issued the identifier (chamber of commerce...)
	IssuingAuthority *string `json:"issuingAuthority,omitempty"`
	// Date at which the identifier was issued
	IssuingDate *time.Time `json:"issuingDate,omitempty"`
	// Type of identification information used to identify the company in a country or internationally
	IdentificationType *string `json:"identificationType,omitempty"`
	ValidFor *TimePeriod `json:"validFor,omitempty"`
	Attachment *AttachmentRefOrValueFVO `json:"attachment,omitempty"`
}

type _OrganizationIdentificationFVO OrganizationIdentificationFVO

// NewOrganizationIdentificationFVO instantiates a new OrganizationIdentificationFVO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationIdentificationFVO(type_ string) *OrganizationIdentificationFVO {
	this := OrganizationIdentificationFVO{}
	this.Type = type_
	return &this
}

// NewOrganizationIdentificationFVOWithDefaults instantiates a new OrganizationIdentificationFVO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationIdentificationFVOWithDefaults() *OrganizationIdentificationFVO {
	this := OrganizationIdentificationFVO{}
	return &this
}

// GetType returns the Type field value
func (o *OrganizationIdentificationFVO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OrganizationIdentificationFVO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OrganizationIdentificationFVO) SetType(v string) {
	o.Type = v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *OrganizationIdentificationFVO) GetBaseType() string {
	if o == nil || IsNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationIdentificationFVO) GetBaseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *OrganizationIdentificationFVO) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *OrganizationIdentificationFVO) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSchemaLocation returns the SchemaLocation field value if set, zero value otherwise.
func (o *OrganizationIdentificationFVO) GetSchemaLocation() string {
	if o == nil || IsNil(o.SchemaLocation) {
		var ret string
		return ret
	}
	return *o.SchemaLocation
}

// GetSchemaLocationOk returns a tuple with the SchemaLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationIdentificationFVO) GetSchemaLocationOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaLocation) {
		return nil, false
	}
	return o.SchemaLocation, true
}

// HasSchemaLocation returns a boolean if a field has been set.
func (o *OrganizationIdentificationFVO) HasSchemaLocation() bool {
	if o != nil && !IsNil(o.SchemaLocation) {
		return true
	}

	return false
}

// SetSchemaLocation gets a reference to the given string and assigns it to the SchemaLocation field.
func (o *OrganizationIdentificationFVO) SetSchemaLocation(v string) {
	o.SchemaLocation = &v
}

// GetIdentificationId returns the IdentificationId field value if set, zero value otherwise.
func (o *OrganizationIdentificationFVO) GetIdentificationId() string {
	if o == nil || IsNil(o.IdentificationId) {
		var ret string
		return ret
	}
	return *o.IdentificationId
}

// GetIdentificationIdOk returns a tuple with the IdentificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationIdentificationFVO) GetIdentificationIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentificationId) {
		return nil, false
	}
	return o.IdentificationId, true
}

// HasIdentificationId returns a boolean if a field has been set.
func (o *OrganizationIdentificationFVO) HasIdentificationId() bool {
	if o != nil && !IsNil(o.IdentificationId) {
		return true
	}

	return false
}

// SetIdentificationId gets a reference to the given string and assigns it to the IdentificationId field.
func (o *OrganizationIdentificationFVO) SetIdentificationId(v string) {
	o.IdentificationId = &v
}

// GetIssuingAuthority returns the IssuingAuthority field value if set, zero value otherwise.
func (o *OrganizationIdentificationFVO) GetIssuingAuthority() string {
	if o == nil || IsNil(o.IssuingAuthority) {
		var ret string
		return ret
	}
	return *o.IssuingAuthority
}

// GetIssuingAuthorityOk returns a tuple with the IssuingAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationIdentificationFVO) GetIssuingAuthorityOk() (*string, bool) {
	if o == nil || IsNil(o.IssuingAuthority) {
		return nil, false
	}
	return o.IssuingAuthority, true
}

// HasIssuingAuthority returns a boolean if a field has been set.
func (o *OrganizationIdentificationFVO) HasIssuingAuthority() bool {
	if o != nil && !IsNil(o.IssuingAuthority) {
		return true
	}

	return false
}

// SetIssuingAuthority gets a reference to the given string and assigns it to the IssuingAuthority field.
func (o *OrganizationIdentificationFVO) SetIssuingAuthority(v string) {
	o.IssuingAuthority = &v
}

// GetIssuingDate returns the IssuingDate field value if set, zero value otherwise.
func (o *OrganizationIdentificationFVO) GetIssuingDate() time.Time {
	if o == nil || IsNil(o.IssuingDate) {
		var ret time.Time
		return ret
	}
	return *o.IssuingDate
}

// GetIssuingDateOk returns a tuple with the IssuingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationIdentificationFVO) GetIssuingDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.IssuingDate) {
		return nil, false
	}
	return o.IssuingDate, true
}

// HasIssuingDate returns a boolean if a field has been set.
func (o *OrganizationIdentificationFVO) HasIssuingDate() bool {
	if o != nil && !IsNil(o.IssuingDate) {
		return true
	}

	return false
}

// SetIssuingDate gets a reference to the given time.Time and assigns it to the IssuingDate field.
func (o *OrganizationIdentificationFVO) SetIssuingDate(v time.Time) {
	o.IssuingDate = &v
}

// GetIdentificationType returns the IdentificationType field value if set, zero value otherwise.
func (o *OrganizationIdentificationFVO) GetIdentificationType() string {
	if o == nil || IsNil(o.IdentificationType) {
		var ret string
		return ret
	}
	return *o.IdentificationType
}

// GetIdentificationTypeOk returns a tuple with the IdentificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationIdentificationFVO) GetIdentificationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IdentificationType) {
		return nil, false
	}
	return o.IdentificationType, true
}

// HasIdentificationType returns a boolean if a field has been set.
func (o *OrganizationIdentificationFVO) HasIdentificationType() bool {
	if o != nil && !IsNil(o.IdentificationType) {
		return true
	}

	return false
}

// SetIdentificationType gets a reference to the given string and assigns it to the IdentificationType field.
func (o *OrganizationIdentificationFVO) SetIdentificationType(v string) {
	o.IdentificationType = &v
}

// GetValidFor returns the ValidFor field value if set, zero value otherwise.
func (o *OrganizationIdentificationFVO) GetValidFor() TimePeriod {
	if o == nil || IsNil(o.ValidFor) {
		var ret TimePeriod
		return ret
	}
	return *o.ValidFor
}

// GetValidForOk returns a tuple with the ValidFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationIdentificationFVO) GetValidForOk() (*TimePeriod, bool) {
	if o == nil || IsNil(o.ValidFor) {
		return nil, false
	}
	return o.ValidFor, true
}

// HasValidFor returns a boolean if a field has been set.
func (o *OrganizationIdentificationFVO) HasValidFor() bool {
	if o != nil && !IsNil(o.ValidFor) {
		return true
	}

	return false
}

// SetValidFor gets a reference to the given TimePeriod and assigns it to the ValidFor field.
func (o *OrganizationIdentificationFVO) SetValidFor(v TimePeriod) {
	o.ValidFor = &v
}

// GetAttachment returns the Attachment field value if set, zero value otherwise.
func (o *OrganizationIdentificationFVO) GetAttachment() AttachmentRefOrValueFVO {
	if o == nil || IsNil(o.Attachment) {
		var ret AttachmentRefOrValueFVO
		return ret
	}
	return *o.Attachment
}

// GetAttachmentOk returns a tuple with the Attachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationIdentificationFVO) GetAttachmentOk() (*AttachmentRefOrValueFVO, bool) {
	if o == nil || IsNil(o.Attachment) {
		return nil, false
	}
	return o.Attachment, true
}

// HasAttachment returns a boolean if a field has been set.
func (o *OrganizationIdentificationFVO) HasAttachment() bool {
	if o != nil && !IsNil(o.Attachment) {
		return true
	}

	return false
}

// SetAttachment gets a reference to the given AttachmentRefOrValueFVO and assigns it to the Attachment field.
func (o *OrganizationIdentificationFVO) SetAttachment(v AttachmentRefOrValueFVO) {
	o.Attachment = &v
}

func (o OrganizationIdentificationFVO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationIdentificationFVO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@type"] = o.Type
	if !IsNil(o.BaseType) {
		toSerialize["@baseType"] = o.BaseType
	}
	if !IsNil(o.SchemaLocation) {
		toSerialize["@schemaLocation"] = o.SchemaLocation
	}
	if !IsNil(o.IdentificationId) {
		toSerialize["identificationId"] = o.IdentificationId
	}
	if !IsNil(o.IssuingAuthority) {
		toSerialize["issuingAuthority"] = o.IssuingAuthority
	}
	if !IsNil(o.IssuingDate) {
		toSerialize["issuingDate"] = o.IssuingDate
	}
	if !IsNil(o.IdentificationType) {
		toSerialize["identificationType"] = o.IdentificationType
	}
	if !IsNil(o.ValidFor) {
		toSerialize["validFor"] = o.ValidFor
	}
	if !IsNil(o.Attachment) {
		toSerialize["attachment"] = o.Attachment
	}
	return toSerialize, nil
}

func (o *OrganizationIdentificationFVO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationIdentificationFVO := _OrganizationIdentificationFVO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrganizationIdentificationFVO)

	if err != nil {
		return err
	}

	*o = OrganizationIdentificationFVO(varOrganizationIdentificationFVO)

	return err
}

type NullableOrganizationIdentificationFVO struct {
	value *OrganizationIdentificationFVO
	isSet bool
}

func (v NullableOrganizationIdentificationFVO) Get() *OrganizationIdentificationFVO {
	return v.value
}

func (v *NullableOrganizationIdentificationFVO) Set(val *OrganizationIdentificationFVO) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationIdentificationFVO) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationIdentificationFVO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationIdentificationFVO(val *OrganizationIdentificationFVO) *NullableOrganizationIdentificationFVO {
	return &NullableOrganizationIdentificationFVO{value: val, isSet: true}
}

func (v NullableOrganizationIdentificationFVO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationIdentificationFVO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


