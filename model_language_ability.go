/*
Party Management

TMF API Reference : TMF 632 - Party  Release: 22.5 The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion, and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3rd payer for a given offer and, then, allows consultation or update of his information. Resources - Party (abstract base class with concrete subclasses Individual and Organization) Party API performs the following operations: - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organization or individual

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LanguageAbility type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguageAbility{}

// LanguageAbility Ability of an individual to understand or converse in a language.
type LanguageAbility struct {
	// Language code (RFC 5646)
	LanguageCode *string `json:"languageCode,omitempty"`
	// Language name
	LanguageName *string `json:"languageName,omitempty"`
	// A “true” value specifies whether the language is considered by the individual as his favourite one
	IsFavouriteLanguage *bool `json:"isFavouriteLanguage,omitempty"`
	// Writing proficiency evaluated for this language
	WritingProficiency *string `json:"writingProficiency,omitempty"`
	// Reading proficiency evaluated for this language
	ReadingProficiency *string `json:"readingProficiency,omitempty"`
	// Speaking proficiency evaluated for this language
	SpeakingProficiency *string `json:"speakingProficiency,omitempty"`
	// Listening proficiency evaluated for this language
	ListeningProficiency *string `json:"listeningProficiency,omitempty"`
	ValidFor *TimePeriod `json:"validFor,omitempty"`
}

// NewLanguageAbility instantiates a new LanguageAbility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageAbility() *LanguageAbility {
	this := LanguageAbility{}
	return &this
}

// NewLanguageAbilityWithDefaults instantiates a new LanguageAbility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageAbilityWithDefaults() *LanguageAbility {
	this := LanguageAbility{}
	return &this
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *LanguageAbility) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageAbility) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *LanguageAbility) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *LanguageAbility) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetLanguageName returns the LanguageName field value if set, zero value otherwise.
func (o *LanguageAbility) GetLanguageName() string {
	if o == nil || IsNil(o.LanguageName) {
		var ret string
		return ret
	}
	return *o.LanguageName
}

// GetLanguageNameOk returns a tuple with the LanguageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageAbility) GetLanguageNameOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageName) {
		return nil, false
	}
	return o.LanguageName, true
}

// HasLanguageName returns a boolean if a field has been set.
func (o *LanguageAbility) HasLanguageName() bool {
	if o != nil && !IsNil(o.LanguageName) {
		return true
	}

	return false
}

// SetLanguageName gets a reference to the given string and assigns it to the LanguageName field.
func (o *LanguageAbility) SetLanguageName(v string) {
	o.LanguageName = &v
}

// GetIsFavouriteLanguage returns the IsFavouriteLanguage field value if set, zero value otherwise.
func (o *LanguageAbility) GetIsFavouriteLanguage() bool {
	if o == nil || IsNil(o.IsFavouriteLanguage) {
		var ret bool
		return ret
	}
	return *o.IsFavouriteLanguage
}

// GetIsFavouriteLanguageOk returns a tuple with the IsFavouriteLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageAbility) GetIsFavouriteLanguageOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavouriteLanguage) {
		return nil, false
	}
	return o.IsFavouriteLanguage, true
}

// HasIsFavouriteLanguage returns a boolean if a field has been set.
func (o *LanguageAbility) HasIsFavouriteLanguage() bool {
	if o != nil && !IsNil(o.IsFavouriteLanguage) {
		return true
	}

	return false
}

// SetIsFavouriteLanguage gets a reference to the given bool and assigns it to the IsFavouriteLanguage field.
func (o *LanguageAbility) SetIsFavouriteLanguage(v bool) {
	o.IsFavouriteLanguage = &v
}

// GetWritingProficiency returns the WritingProficiency field value if set, zero value otherwise.
func (o *LanguageAbility) GetWritingProficiency() string {
	if o == nil || IsNil(o.WritingProficiency) {
		var ret string
		return ret
	}
	return *o.WritingProficiency
}

// GetWritingProficiencyOk returns a tuple with the WritingProficiency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageAbility) GetWritingProficiencyOk() (*string, bool) {
	if o == nil || IsNil(o.WritingProficiency) {
		return nil, false
	}
	return o.WritingProficiency, true
}

// HasWritingProficiency returns a boolean if a field has been set.
func (o *LanguageAbility) HasWritingProficiency() bool {
	if o != nil && !IsNil(o.WritingProficiency) {
		return true
	}

	return false
}

// SetWritingProficiency gets a reference to the given string and assigns it to the WritingProficiency field.
func (o *LanguageAbility) SetWritingProficiency(v string) {
	o.WritingProficiency = &v
}

// GetReadingProficiency returns the ReadingProficiency field value if set, zero value otherwise.
func (o *LanguageAbility) GetReadingProficiency() string {
	if o == nil || IsNil(o.ReadingProficiency) {
		var ret string
		return ret
	}
	return *o.ReadingProficiency
}

// GetReadingProficiencyOk returns a tuple with the ReadingProficiency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageAbility) GetReadingProficiencyOk() (*string, bool) {
	if o == nil || IsNil(o.ReadingProficiency) {
		return nil, false
	}
	return o.ReadingProficiency, true
}

// HasReadingProficiency returns a boolean if a field has been set.
func (o *LanguageAbility) HasReadingProficiency() bool {
	if o != nil && !IsNil(o.ReadingProficiency) {
		return true
	}

	return false
}

// SetReadingProficiency gets a reference to the given string and assigns it to the ReadingProficiency field.
func (o *LanguageAbility) SetReadingProficiency(v string) {
	o.ReadingProficiency = &v
}

// GetSpeakingProficiency returns the SpeakingProficiency field value if set, zero value otherwise.
func (o *LanguageAbility) GetSpeakingProficiency() string {
	if o == nil || IsNil(o.SpeakingProficiency) {
		var ret string
		return ret
	}
	return *o.SpeakingProficiency
}

// GetSpeakingProficiencyOk returns a tuple with the SpeakingProficiency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageAbility) GetSpeakingProficiencyOk() (*string, bool) {
	if o == nil || IsNil(o.SpeakingProficiency) {
		return nil, false
	}
	return o.SpeakingProficiency, true
}

// HasSpeakingProficiency returns a boolean if a field has been set.
func (o *LanguageAbility) HasSpeakingProficiency() bool {
	if o != nil && !IsNil(o.SpeakingProficiency) {
		return true
	}

	return false
}

// SetSpeakingProficiency gets a reference to the given string and assigns it to the SpeakingProficiency field.
func (o *LanguageAbility) SetSpeakingProficiency(v string) {
	o.SpeakingProficiency = &v
}

// GetListeningProficiency returns the ListeningProficiency field value if set, zero value otherwise.
func (o *LanguageAbility) GetListeningProficiency() string {
	if o == nil || IsNil(o.ListeningProficiency) {
		var ret string
		return ret
	}
	return *o.ListeningProficiency
}

// GetListeningProficiencyOk returns a tuple with the ListeningProficiency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageAbility) GetListeningProficiencyOk() (*string, bool) {
	if o == nil || IsNil(o.ListeningProficiency) {
		return nil, false
	}
	return o.ListeningProficiency, true
}

// HasListeningProficiency returns a boolean if a field has been set.
func (o *LanguageAbility) HasListeningProficiency() bool {
	if o != nil && !IsNil(o.ListeningProficiency) {
		return true
	}

	return false
}

// SetListeningProficiency gets a reference to the given string and assigns it to the ListeningProficiency field.
func (o *LanguageAbility) SetListeningProficiency(v string) {
	o.ListeningProficiency = &v
}

// GetValidFor returns the ValidFor field value if set, zero value otherwise.
func (o *LanguageAbility) GetValidFor() TimePeriod {
	if o == nil || IsNil(o.ValidFor) {
		var ret TimePeriod
		return ret
	}
	return *o.ValidFor
}

// GetValidForOk returns a tuple with the ValidFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageAbility) GetValidForOk() (*TimePeriod, bool) {
	if o == nil || IsNil(o.ValidFor) {
		return nil, false
	}
	return o.ValidFor, true
}

// HasValidFor returns a boolean if a field has been set.
func (o *LanguageAbility) HasValidFor() bool {
	if o != nil && !IsNil(o.ValidFor) {
		return true
	}

	return false
}

// SetValidFor gets a reference to the given TimePeriod and assigns it to the ValidFor field.
func (o *LanguageAbility) SetValidFor(v TimePeriod) {
	o.ValidFor = &v
}

func (o LanguageAbility) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguageAbility) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.LanguageName) {
		toSerialize["languageName"] = o.LanguageName
	}
	if !IsNil(o.IsFavouriteLanguage) {
		toSerialize["isFavouriteLanguage"] = o.IsFavouriteLanguage
	}
	if !IsNil(o.WritingProficiency) {
		toSerialize["writingProficiency"] = o.WritingProficiency
	}
	if !IsNil(o.ReadingProficiency) {
		toSerialize["readingProficiency"] = o.ReadingProficiency
	}
	if !IsNil(o.SpeakingProficiency) {
		toSerialize["speakingProficiency"] = o.SpeakingProficiency
	}
	if !IsNil(o.ListeningProficiency) {
		toSerialize["listeningProficiency"] = o.ListeningProficiency
	}
	if !IsNil(o.ValidFor) {
		toSerialize["validFor"] = o.ValidFor
	}
	return toSerialize, nil
}

type NullableLanguageAbility struct {
	value *LanguageAbility
	isSet bool
}

func (v NullableLanguageAbility) Get() *LanguageAbility {
	return v.value
}

func (v *NullableLanguageAbility) Set(val *LanguageAbility) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageAbility) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageAbility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageAbility(val *LanguageAbility) *NullableLanguageAbility {
	return &NullableLanguageAbility{value: val, isSet: true}
}

func (v NullableLanguageAbility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageAbility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


